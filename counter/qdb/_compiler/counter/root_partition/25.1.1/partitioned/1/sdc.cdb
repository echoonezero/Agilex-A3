22 serialization::archive 19 0 0 0 0 6 0 2 C: 8 projects 4 FPGA 5 intel 2 A3 7 counter 0 0 4 0 0 0 13 0 2 C: 8 projects 4 FPGA 5 intel 2 A3 7 counter 3 src 4 qsys 5 iopll 5 iopll 17 altera_iopll_2000 5 synth 35 iopll_altera_iopll_2000_n6jjr3a.sdc 9973 # (C) 2001-2025 Altera Corporation. All rights reserved.
# Your use of Altera Corporation's design tools, logic functions and other 
# software and tools, and its AMPP partner logic functions, and any output 
# files from any of the foregoing (including device programming or simulation 
# files), and any associated documentation or information are expressly subject 
# to the terms and conditions of the Altera Program License Subscription 
# Agreement, Altera IP License Agreement, or other applicable 
# license agreement, including, without limitation, that your use is for the 
# sole purpose of programming logic devices manufactured by Altera and sold by 
# Altera or its authorized distributors.  Please refer to the applicable 
# agreement for further details.


#####################################################################
#
# THIS IS AN AUTO-GENERATED FILE!
# -------------------------------
# If you modify this files, all your changes will be lost if you
# regenerate the core!
#
# FILE DESCRIPTION
# ----------------
# This file contains the timing constraints for the Altera PLL.
#    * The helper routines are defined in iopll_altera_iopll_2000_n6jjr3a_pin_map.tcl
#
# NOTE
# ----
# Debug switch. Change to 1 to get more run-time debug information
set debug 0

set script_dir [file dirname [info script]]

source "$script_dir/iopll_altera_iopll_2000_n6jjr3a_parameters.tcl"
source "$script_dir/iopll_altera_iopll_2000_n6jjr3a_pin_map.tcl"
source "$script_dir/iopll_altera_iopll_2000_n6jjr3a_all_ip_params.tcl"

####################
#                  #
# GENERAL SETTINGS #
#                  #
####################

# This is a global setting and will apply to the whole design.
# This setting is required for the memory interface to be
# properly constrained.
derive_clock_uncertainty


# All timing requirements will be represented in nanoseconds with up to 3 decimal places of precision
set_time_format -unit ns -decimal_places 3

# Determine if entity names are on
set entity_names_on [ ai_are_entity_names_on ]

if {[catch {load_package atoms
            load_package sdc_ext
            load_package design
            catch {read_atom_netlist} read_atom_netlist_out
            set read_atom_netlist_error [regexp "ERROR" $read_atom_netlist_out]
            } err_loading_packages]} {
    post_message -type error "Failed to load packages required by IOPLL SDC: $err_loading_packages"
}

# This is the main call to the netlist traversal routines
# that will automatically find all pins and registers required
# to apply timing constraints.
# During the fitter, the routines will be called only once
# and cached data will be used in all subsequent calls.



if {[info exists ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_corename_ai_pll_db]} {
    # Clean-up stale content
    unset ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_corename_ai_pll_db
}
if {[catch {ai_initialize_pll_db ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_corename_ai_pll_db} err_initializing_db]} {
    post_message -type warning "Failed to find atom information in IOPLL SDC: $err_initializing_db"
}

# If multiple instances of this core are present in the
# design they will all be constrained through the
# following loop
set instances [ array names ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_corename_ai_pll_db ]
foreach { inst } $instances {
    if { [ info exists pins ] } {
        # Clean-up stale content
        unset pins
    }
    
    # -------------------------------- #
    # -                              - #
    # --- Determine PLL Parameters --- #
    # -                              - #
    # -------------------------------- #
    
    set pll_atoms [get_atom_nodes -matching ${inst}* -type IOPLL]
    set num_pll_inst [get_collection_size $pll_atoms]
    
    if {$num_pll_inst > 1} { 
        # Error condition
        post_message -type error "SDC: More than one PLL atom found with instance name $inst"
    } else {
        # Use IP generated parameters
        if { $debug } {
            post_message -type info "SDC: using IP generated parameter values"
        }
    }

    # These dictionaries hold all the clock information.
    lassign $::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_corename_ai_pll_db($inst) base_clock_data_dict gen_clock_data_dict
    
    # ------------------------ #
    # -                      - #
    # ---REFERENCE CLOCK(s)--- #
    # -                      - #
    # ------------------------ #
    dict for {clock_key info} $base_clock_data_dict {
        dict with info {
            if {$is_fpga_pin && !$exists} {
               create_clock -period $period \
                   -waveform [ list 0 $half_period] \
                   -name $name $port_node_name \
                   -add
            }
        }
    }
    # ------------------------- #
    # -                       - #
    # --- OUTPUT PLL CLOCKS --- #
    # -                       - #
    # ------------------------- #
    set refclk_iterm_dict [dict create]
    dict for {clock_key info} $gen_clock_data_dict {
        dict with info {
            if {[is_post_syn_sta]} {
                if {$is_valid && !$exists} {
                    create_non_virtual_generated_clock_with_master_or_source \
                        $master \
                        $src \
                        $name \
                        $multiply_by \
                        $divide_by \
                        $phase \
                        $duty_cycle \
                        $pin_node_name

                    if {[string match lvds* $clock_key] && [string match *loaden* $pattern] && [dict exists $gen_clock_data_dict $clock_key "through_pin" ] } {
                        set_max_delay_in_fit_or_false_path_in_sta_through_no_warn $through_pin $max_delay
                    }
                } elseif {[is_m_n_cntr $pattern]} {
                    create_virtual_generated_clock_with_master_or_source \
                        $master \
                        $src \
                        $name \
                        $multiply_by \
                        $divide_by \
                        $phase \
                        $duty_cycle
                }
            } else {
                if {$is_valid && !$exists} {
                    
                    unset -nocomplain refclk_hier
                    regexp -- {^(.*tennm_ph2_iopll)} $pin_node_name -> refclk_hier
                    if {[info exists refclk_hier] == 0} {
                       regexp -- {^(.*intelsixteen_iopll)} $pin_node_name -> refclk_hier
                    }
               
                    set refclk_src "${refclk_hier}|ref_clk0"
                    set master_clock [get_master_clock_given_refclk_src $refclk_src]
                    set need_master_clock_set false
					
                    # Case: 15014500070, not creating the intermediate clock when the current pll is a downstream cascading pll.
                    set pll_ip_params $::pll_all_ip_params
                    set is_downstream_cascading_clk [expr {[dict get $pll_ip_params gui_enable_permit_cal] || [dict get $pll_ip_params gui_enable_cascade_in]}]
                    if {!$is_downstream_cascading_clk} {
                        if {$src eq $refclk_src} {
                            # Intermediate clock already exists but doesn't have master clock set.
                            # Can't set master clock on existing intermediate clock without warnings so need to set master clock on current clock.
                            set need_master_clock_set [expr {$master ne ""}]
                            dict set refclk_iterm_dict $refclk_src $src
                        } elseif {![dict exists $refclk_iterm_dict $refclk_src]} {
                            create_generated_clock -add \
                                -source $src \
                                -master_clock $master_clock \
                                $refclk_src
                            dict set refclk_iterm_dict $refclk_src $src
                        }
                        if {[dict exists $refclk_iterm_dict $refclk_src] && $src eq [dict get $refclk_iterm_dict $refclk_src]} {
                            set src $refclk_src
                        }
                    }

                    if {$need_master_clock_set} {
				  
                        create_generated_clock -add \
                            -source $src \
                            -master_clock $master_clock\
                            -name $name \
                            -multiply_by $multiply_by \
                            -divide_by $divide_by \
                            -phase $phase \
                            -duty_cycle $duty_cycle \
                            $pin_node_name
                    } else {
				  
                        create_generated_clock -add \
                            -source $src \
                            -name $name \
                            -multiply_by $multiply_by \
                            -divide_by $divide_by \
                            -phase $phase \
                            -duty_cycle $duty_cycle \
                            $pin_node_name
                    }
                    
                    if {[string match lvds* $clock_key] && [string match *loaden* $pattern] && [dict exists $gen_clock_data_dict $clock_key "through_pin" ] } {
                        set_max_delay_in_fit_or_false_path_in_sta_through_no_warn $through_pin $max_delay
                    }
                }
            }
        }
    }

    foreach_in_collection node [get_nodes -no_duplicates -nowarn "${inst}|tennm_ph2_iopll|reset"] {
        set_false_path -through [get_node_info -name $node]
    }
}
 13 0 2 C: 8 projects 4 FPGA 5 intel 2 A3 7 counter 3 src 4 qsys 5 iopll 5 iopll 17 altera_iopll_2000 5 synth 49 iopll_altera_iopll_2000_n6jjr3a_all_ip_params.tcl 51743 # PLL parameters

#USER W A R N I N G !
#USER The PLL parameters are statically defined in this
#USER file at generation time!

set ::pll_corename iopll_altera_iopll_2000_n6jjr3a

set ::pll_all_ip_params [dict create]

dict set ::pll_all_ip_params gui_device_family "Agilex 3"
dict set ::pll_all_ip_params gui_device_component "A3CZ135BB18AE7S"
dict set ::pll_all_ip_params gui_device_speed_grade "6"
dict set ::pll_all_ip_params gui_device_iobank_rev "IO96B_REVB1"
dict set ::pll_all_ip_params gui_debug_mode "false"
dict set ::pll_all_ip_params gui_skip_sdc_generation "false"
dict set ::pll_all_ip_params gui_include_iossm "false"
dict set ::pll_all_ip_params gui_cal_code_hex_file "iossm.hex"
dict set ::pll_all_ip_params gui_parameter_table_hex_file "seq_params_sim.hex"
dict set ::pll_all_ip_params gui_pll_tclk_mux_en "false"
dict set ::pll_all_ip_params gui_pll_tclk_sel "pll_tclk_m_src"
dict set ::pll_all_ip_params gui_pll_vco_freq_band_0 "pll_freq_clk0_band18"
dict set ::pll_all_ip_params gui_pll_vco_freq_band_1 "pll_freq_clk1_band18"
dict set ::pll_all_ip_params gui_pll_freqcal_en "true"
dict set ::pll_all_ip_params gui_pll_freqcal_req_flag "true"
dict set ::pll_all_ip_params gui_cal_converge "false"
dict set ::pll_all_ip_params gui_cal_error "cal_clean"
dict set ::pll_all_ip_params gui_pll_cal_done "false"
dict set ::pll_all_ip_params gui_pll_type "S10_Physical"
dict set ::pll_all_ip_params gui_pll_m_cnt_in_src "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params gui_c_cnt_in_src0 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params gui_c_cnt_in_src1 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params gui_c_cnt_in_src2 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params gui_c_cnt_in_src3 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params gui_c_cnt_in_src4 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params gui_c_cnt_in_src5 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params gui_c_cnt_in_src6 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params gui_c_cnt_in_src7 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params gui_c_cnt_in_src8 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params system_info_device_family "Agilex 3"
dict set ::pll_all_ip_params system_info_device_component "A3CZ135BB18AE7S"
dict set ::pll_all_ip_params system_part_trait_speed_grade "7"
dict set ::pll_all_ip_params system_part_trait_iobank_rev "IO96B_REVB1"
dict set ::pll_all_ip_params system_info_device_speed_grade "6"
dict set ::pll_all_ip_params gui_usr_device_speed_grade "1"
dict set ::pll_all_ip_params gui_en_reconf "false"
dict set ::pll_all_ip_params gui_en_hvio_reconf "false"
dict set ::pll_all_ip_params gui_en_iossm_reconf "false"
dict set ::pll_all_ip_params gui_user_base_address "0"
dict set ::pll_all_ip_params gui_en_dps_ports "false"
dict set ::pll_all_ip_params gui_pll_mode "Integer-N PLL"
dict set ::pll_all_ip_params gui_location_type "I/O Bank"
dict set ::pll_all_ip_params gui_use_logical "false"
dict set ::pll_all_ip_params gui_reference_clock_frequency "50.0"
dict set ::pll_all_ip_params gui_reference_clock_frequency_ps "20000.0"
dict set ::pll_all_ip_params gui_use_coreclk "false"
dict set ::pll_all_ip_params gui_refclk_might_change "false"
dict set ::pll_all_ip_params gui_fractional_cout "24"
dict set ::pll_all_ip_params gui_prot_mode "UNUSED"
dict set ::pll_all_ip_params gui_dsm_out_sel "1st_order"
dict set ::pll_all_ip_params gui_use_locked "false"
dict set ::pll_all_ip_params gui_en_adv_params "false"
dict set ::pll_all_ip_params gui_use_fractional_division "false"
dict set ::pll_all_ip_params gui_pll_bandwidth_preset "Low"
dict set ::pll_all_ip_params gui_lock_setting "Low Lock Time"
dict set ::pll_all_ip_params gui_pll_auto_reset "false"
dict set ::pll_all_ip_params gui_en_lvds_ports "Disabled"
dict set ::pll_all_ip_params gui_en_periphery_ports "false"
dict set ::pll_all_ip_params gui_operation_mode "direct"
dict set ::pll_all_ip_params gui_feedback_clock "Global Clock"
dict set ::pll_all_ip_params gui_clock_to_compensate "0"
dict set ::pll_all_ip_params gui_use_NDFB_modes "false"
dict set ::pll_all_ip_params gui_refclk_switch "false"
dict set ::pll_all_ip_params gui_refclk1_frequency "100.0"
dict set ::pll_all_ip_params gui_en_phout_ports "false"
dict set ::pll_all_ip_params gui_phout_division "1"
dict set ::pll_all_ip_params gui_en_extclkout_ports "false"
dict set ::pll_all_ip_params gui_number_of_clocks "1"
dict set ::pll_all_ip_params gui_multiply_factor "6"
dict set ::pll_all_ip_params gui_multiply_fraction "0"
dict set ::pll_all_ip_params gui_divide_factor_n "1"
dict set ::pll_all_ip_params gui_frac_multiply_factor "0"
dict set ::pll_all_ip_params gui_fix_vco_frequency "false"
dict set ::pll_all_ip_params gui_fixed_vco_frequency "600.0"
dict set ::pll_all_ip_params gui_fixed_vco_frequency_ps "1667.0"
dict set ::pll_all_ip_params gui_vco_frequency "600.0"
dict set ::pll_all_ip_params gui_enable_output_counter_cascading "false"
dict set ::pll_all_ip_params gui_mif_gen_options "Generate New MIF File"
dict set ::pll_all_ip_params gui_new_mif_file_path "~/pll.mif"
dict set ::pll_all_ip_params gui_existing_mif_file_path "~/pll.mif"
dict set ::pll_all_ip_params gui_mif_config_name "unnamed"
dict set ::pll_all_ip_params gui_active_clk "false"
dict set ::pll_all_ip_params gui_clk_bad "false"
dict set ::pll_all_ip_params gui_switchover_mode "Automatic Switchover"
dict set ::pll_all_ip_params gui_switchover_delay "0"
dict set ::pll_all_ip_params gui_enable_cascade_out "false"
dict set ::pll_all_ip_params gui_cascade_outclk_index "0"
dict set ::pll_all_ip_params gui_enable_cascade_in "false"
dict set ::pll_all_ip_params gui_enable_permit_cal "false"
dict set ::pll_all_ip_params gui_enable_upstream_out_clk "false"
dict set ::pll_all_ip_params gui_pll_cascading_mode "adjpllin"
dict set ::pll_all_ip_params gui_enable_mif_dps "false"
dict set ::pll_all_ip_params gui_dps_cntr "C0"
dict set ::pll_all_ip_params gui_dps_num "1"
dict set ::pll_all_ip_params gui_dps_dir "Positive"
dict set ::pll_all_ip_params gui_extclkout_0_source "C0"
dict set ::pll_all_ip_params gui_extclkout_1_source "C0"
dict set ::pll_all_ip_params gui_extclkout_source "C0"
dict set ::pll_all_ip_params gui_clock_name_global "false"
dict set ::pll_all_ip_params gui_clock_name_instantiation "false"
dict set ::pll_all_ip_params gui_clock_name_string0 "outclk0"
dict set ::pll_all_ip_params gui_clock_name_string1 "outclk1"
dict set ::pll_all_ip_params gui_clock_name_string2 "outclk2"
dict set ::pll_all_ip_params gui_clock_name_string3 "outclk3"
dict set ::pll_all_ip_params gui_clock_name_string4 "outclk4"
dict set ::pll_all_ip_params gui_clock_name_string5 "outclk5"
dict set ::pll_all_ip_params gui_clock_name_string6 "outclk6"
dict set ::pll_all_ip_params gui_clock_name_string7 "outclk7"
dict set ::pll_all_ip_params gui_clock_name_string8 "outclk8"
dict set ::pll_all_ip_params gui_clock_name_string9 "outclk9"
dict set ::pll_all_ip_params gui_clock_name_string10 "outclk10"
dict set ::pll_all_ip_params gui_clock_name_string11 "outclk11"
dict set ::pll_all_ip_params gui_clock_name_string12 "outclk12"
dict set ::pll_all_ip_params gui_clock_name_string13 "outclk13"
dict set ::pll_all_ip_params gui_clock_name_string14 "outclk14"
dict set ::pll_all_ip_params gui_clock_name_string15 "outclk15"
dict set ::pll_all_ip_params gui_clock_name_string16 "outclk16"
dict set ::pll_all_ip_params gui_clock_name_string17 "outclk17"
dict set ::pll_all_ip_params gui_divide_factor_c0 "6"
dict set ::pll_all_ip_params gui_divide_factor_c1 "6"
dict set ::pll_all_ip_params gui_divide_factor_c2 "6"
dict set ::pll_all_ip_params gui_divide_factor_c3 "6"
dict set ::pll_all_ip_params gui_divide_factor_c4 "6"
dict set ::pll_all_ip_params gui_divide_factor_c5 "6"
dict set ::pll_all_ip_params gui_divide_factor_c6 "6"
dict set ::pll_all_ip_params gui_divide_factor_c7 "6"
dict set ::pll_all_ip_params gui_divide_factor_c8 "6"
dict set ::pll_all_ip_params gui_divide_factor_c9 "6"
dict set ::pll_all_ip_params gui_divide_factor_c10 "6"
dict set ::pll_all_ip_params gui_divide_factor_c11 "6"
dict set ::pll_all_ip_params gui_divide_factor_c12 "6"
dict set ::pll_all_ip_params gui_divide_factor_c13 "6"
dict set ::pll_all_ip_params gui_divide_factor_c14 "6"
dict set ::pll_all_ip_params gui_divide_factor_c15 "6"
dict set ::pll_all_ip_params gui_divide_factor_c16 "6"
dict set ::pll_all_ip_params gui_divide_factor_c17 "6"
dict set ::pll_all_ip_params gui_cascade_counter0 "false"
dict set ::pll_all_ip_params gui_cascade_counter1 "false"
dict set ::pll_all_ip_params gui_cascade_counter2 "false"
dict set ::pll_all_ip_params gui_cascade_counter3 "false"
dict set ::pll_all_ip_params gui_cascade_counter4 "false"
dict set ::pll_all_ip_params gui_cascade_counter5 "false"
dict set ::pll_all_ip_params gui_cascade_counter6 "false"
dict set ::pll_all_ip_params gui_cascade_counter7 "false"
dict set ::pll_all_ip_params gui_cascade_counter8 "false"
dict set ::pll_all_ip_params gui_cascade_counter9 "false"
dict set ::pll_all_ip_params gui_cascade_counter10 "false"
dict set ::pll_all_ip_params gui_cascade_counter11 "false"
dict set ::pll_all_ip_params gui_cascade_counter12 "false"
dict set ::pll_all_ip_params gui_cascade_counter13 "false"
dict set ::pll_all_ip_params gui_cascade_counter14 "false"
dict set ::pll_all_ip_params gui_cascade_counter15 "false"
dict set ::pll_all_ip_params gui_cascade_counter16 "false"
dict set ::pll_all_ip_params gui_cascade_counter17 "false"
dict set ::pll_all_ip_params gui_output_clock_frequency0 "5.0"
dict set ::pll_all_ip_params gui_output_clock_frequency1 "100.0"
dict set ::pll_all_ip_params gui_output_clock_frequency2 "100.0"
dict set ::pll_all_ip_params gui_output_clock_frequency3 "100.0"
dict set ::pll_all_ip_params gui_output_clock_frequency4 "100.0"
dict set ::pll_all_ip_params gui_output_clock_frequency5 "100.0"
dict set ::pll_all_ip_params gui_output_clock_frequency6 "100.0"
dict set ::pll_all_ip_params gui_output_clock_frequency7 "100.0"
dict set ::pll_all_ip_params gui_output_clock_frequency8 "100.0"
dict set ::pll_all_ip_params gui_output_clock_frequency9 "100.0"
dict set ::pll_all_ip_params gui_output_clock_frequency10 "100.0"
dict set ::pll_all_ip_params gui_output_clock_frequency11 "100.0"
dict set ::pll_all_ip_params gui_output_clock_frequency12 "100.0"
dict set ::pll_all_ip_params gui_output_clock_frequency13 "100.0"
dict set ::pll_all_ip_params gui_output_clock_frequency14 "100.0"
dict set ::pll_all_ip_params gui_output_clock_frequency15 "100.0"
dict set ::pll_all_ip_params gui_output_clock_frequency16 "100.0"
dict set ::pll_all_ip_params gui_output_clock_frequency17 "100.0"
dict set ::pll_all_ip_params gui_output_clock_frequency_ps0 "200000.0"
dict set ::pll_all_ip_params gui_output_clock_frequency_ps1 "10000.0"
dict set ::pll_all_ip_params gui_output_clock_frequency_ps2 "10000.0"
dict set ::pll_all_ip_params gui_output_clock_frequency_ps3 "10000.0"
dict set ::pll_all_ip_params gui_output_clock_frequency_ps4 "10000.0"
dict set ::pll_all_ip_params gui_output_clock_frequency_ps5 "10000.0"
dict set ::pll_all_ip_params gui_output_clock_frequency_ps6 "10000.0"
dict set ::pll_all_ip_params gui_output_clock_frequency_ps7 "10000.0"
dict set ::pll_all_ip_params gui_output_clock_frequency_ps8 "10000.0"
dict set ::pll_all_ip_params gui_output_clock_frequency_ps9 "10000.0"
dict set ::pll_all_ip_params gui_output_clock_frequency_ps10 "10000.0"
dict set ::pll_all_ip_params gui_output_clock_frequency_ps11 "10000.0"
dict set ::pll_all_ip_params gui_output_clock_frequency_ps12 "10000.0"
dict set ::pll_all_ip_params gui_output_clock_frequency_ps13 "10000.0"
dict set ::pll_all_ip_params gui_output_clock_frequency_ps14 "10000.0"
dict set ::pll_all_ip_params gui_output_clock_frequency_ps15 "10000.0"
dict set ::pll_all_ip_params gui_output_clock_frequency_ps16 "10000.0"
dict set ::pll_all_ip_params gui_output_clock_frequency_ps17 "10000.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency0 "5.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency1 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency2 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency3 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency4 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency5 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency6 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency7 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency8 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency9 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency10 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency11 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency12 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency13 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency14 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency15 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency16 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency17 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency_range0 "4.996353 4.996431 4.996506 5.0 5.003524 5.0036"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency_range1 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency_range2 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency_range3 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency_range4 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency_range5 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency_range6 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency_range7 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency_range8 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency_range9 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency_range10 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency_range11 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency_range12 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency_range13 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency_range14 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency_range15 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency_range16 "100.0"
dict set ::pll_all_ip_params gui_actual_output_clock_frequency_range17 "100.0"
dict set ::pll_all_ip_params gui_ps_units0 "ps"
dict set ::pll_all_ip_params gui_ps_units1 "ps"
dict set ::pll_all_ip_params gui_ps_units2 "ps"
dict set ::pll_all_ip_params gui_ps_units3 "ps"
dict set ::pll_all_ip_params gui_ps_units4 "ps"
dict set ::pll_all_ip_params gui_ps_units5 "ps"
dict set ::pll_all_ip_params gui_ps_units6 "ps"
dict set ::pll_all_ip_params gui_ps_units7 "ps"
dict set ::pll_all_ip_params gui_ps_units8 "ps"
dict set ::pll_all_ip_params gui_ps_units9 "ps"
dict set ::pll_all_ip_params gui_ps_units10 "ps"
dict set ::pll_all_ip_params gui_ps_units11 "ps"
dict set ::pll_all_ip_params gui_ps_units12 "ps"
dict set ::pll_all_ip_params gui_ps_units13 "ps"
dict set ::pll_all_ip_params gui_ps_units14 "ps"
dict set ::pll_all_ip_params gui_ps_units15 "ps"
dict set ::pll_all_ip_params gui_ps_units16 "ps"
dict set ::pll_all_ip_params gui_ps_units17 "ps"
dict set ::pll_all_ip_params gui_phase_shift0 "0.0"
dict set ::pll_all_ip_params gui_phase_shift1 "0.0"
dict set ::pll_all_ip_params gui_phase_shift2 "0.0"
dict set ::pll_all_ip_params gui_phase_shift3 "0.0"
dict set ::pll_all_ip_params gui_phase_shift4 "0.0"
dict set ::pll_all_ip_params gui_phase_shift5 "0.0"
dict set ::pll_all_ip_params gui_phase_shift6 "0.0"
dict set ::pll_all_ip_params gui_phase_shift7 "0.0"
dict set ::pll_all_ip_params gui_phase_shift8 "0.0"
dict set ::pll_all_ip_params gui_phase_shift9 "0.0"
dict set ::pll_all_ip_params gui_phase_shift10 "0.0"
dict set ::pll_all_ip_params gui_phase_shift11 "0.0"
dict set ::pll_all_ip_params gui_phase_shift12 "0.0"
dict set ::pll_all_ip_params gui_phase_shift13 "0.0"
dict set ::pll_all_ip_params gui_phase_shift14 "0.0"
dict set ::pll_all_ip_params gui_phase_shift15 "0.0"
dict set ::pll_all_ip_params gui_phase_shift16 "0.0"
dict set ::pll_all_ip_params gui_phase_shift17 "0.0"
dict set ::pll_all_ip_params gui_phase_shift_deg0 "0.0"
dict set ::pll_all_ip_params gui_phase_shift_deg1 "0.0"
dict set ::pll_all_ip_params gui_phase_shift_deg2 "0.0"
dict set ::pll_all_ip_params gui_phase_shift_deg3 "0.0"
dict set ::pll_all_ip_params gui_phase_shift_deg4 "0.0"
dict set ::pll_all_ip_params gui_phase_shift_deg5 "0.0"
dict set ::pll_all_ip_params gui_phase_shift_deg6 "0.0"
dict set ::pll_all_ip_params gui_phase_shift_deg7 "0.0"
dict set ::pll_all_ip_params gui_phase_shift_deg8 "0.0"
dict set ::pll_all_ip_params gui_phase_shift_deg9 "0.0"
dict set ::pll_all_ip_params gui_phase_shift_deg10 "0.0"
dict set ::pll_all_ip_params gui_phase_shift_deg11 "0.0"
dict set ::pll_all_ip_params gui_phase_shift_deg12 "0.0"
dict set ::pll_all_ip_params gui_phase_shift_deg13 "0.0"
dict set ::pll_all_ip_params gui_phase_shift_deg14 "0.0"
dict set ::pll_all_ip_params gui_phase_shift_deg15 "0.0"
dict set ::pll_all_ip_params gui_phase_shift_deg16 "0.0"
dict set ::pll_all_ip_params gui_phase_shift_deg17 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift0 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift1 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift2 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift3 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift4 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift5 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift6 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift7 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift8 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift9 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift10 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift11 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift12 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift13 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift14 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift15 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift16 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift17 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_range0 "0.0 52.1 52.6 53.2 53.8 54.3"
dict set ::pll_all_ip_params gui_actual_phase_shift_range1 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_range2 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_range3 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_range4 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_range5 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_range6 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_range7 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_range8 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_range9 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_range10 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_range11 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_range12 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_range13 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_range14 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_range15 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_range16 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_range17 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg0 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg1 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg2 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg3 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg4 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg5 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg6 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg7 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg8 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg9 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg10 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg11 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg12 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg13 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg14 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg15 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg16 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg17 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg_range0 "0.0 0.1 0.1 0.1 0.1 0.1"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg_range1 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg_range2 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg_range3 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg_range4 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg_range5 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg_range6 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg_range7 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg_range8 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg_range9 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg_range10 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg_range11 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg_range12 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg_range13 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg_range14 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg_range15 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg_range16 "0.0"
dict set ::pll_all_ip_params gui_actual_phase_shift_deg_range17 "0.0"
dict set ::pll_all_ip_params gui_duty_cycle0 "50.0"
dict set ::pll_all_ip_params gui_duty_cycle1 "50.0"
dict set ::pll_all_ip_params gui_duty_cycle2 "50.0"
dict set ::pll_all_ip_params gui_duty_cycle3 "50.0"
dict set ::pll_all_ip_params gui_duty_cycle4 "50.0"
dict set ::pll_all_ip_params gui_duty_cycle5 "50.0"
dict set ::pll_all_ip_params gui_duty_cycle6 "50.0"
dict set ::pll_all_ip_params gui_duty_cycle7 "50.0"
dict set ::pll_all_ip_params gui_duty_cycle8 "50.0"
dict set ::pll_all_ip_params gui_duty_cycle9 "50.0"
dict set ::pll_all_ip_params gui_duty_cycle10 "50.0"
dict set ::pll_all_ip_params gui_duty_cycle11 "50.0"
dict set ::pll_all_ip_params gui_duty_cycle12 "50.0"
dict set ::pll_all_ip_params gui_duty_cycle13 "50.0"
dict set ::pll_all_ip_params gui_duty_cycle14 "50.0"
dict set ::pll_all_ip_params gui_duty_cycle15 "50.0"
dict set ::pll_all_ip_params gui_duty_cycle16 "50.0"
dict set ::pll_all_ip_params gui_duty_cycle17 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle0 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle1 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle2 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle3 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle4 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle5 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle6 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle7 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle8 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle9 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle10 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle11 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle12 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle13 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle14 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle15 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle16 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle17 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle_range0 "49.68 49.78 49.88 50.0 50.1 50.2"
dict set ::pll_all_ip_params gui_actual_duty_cycle_range1 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle_range2 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle_range3 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle_range4 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle_range5 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle_range6 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle_range7 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle_range8 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle_range9 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle_range10 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle_range11 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle_range12 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle_range13 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle_range14 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle_range15 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle_range16 "50.0"
dict set ::pll_all_ip_params gui_actual_duty_cycle_range17 "50.0"
dict set ::pll_all_ip_params gui_simulation_type "true"
dict set ::pll_all_ip_params parameterTable_names "{M-Counter Divide Setting} {N-Counter Divide Setting} {VCO Frequency} {C-Counter-0 Divide Setting} {C-Counter-1 Divide Setting} {C-Counter-2 Divide Setting} {C-Counter-3 Divide Setting} {C-Counter-4 Divide Setting} {C-Counter-5 Divide Setting} {C-Counter-6 Divide Setting} {C-Counter-7 Divide Setting} {C-Counter-8 Divide Setting} {PLL Auto Reset} {M-Counter Hi Divide} {M-Counter Lo Divide} {M-Counter Even Duty Enable} {M-Counter Bypass Enable} {N-Counter Hi Divide} {N-Counter Lo Divide} {N-Counter Even Duty Enable} {N-Counter Bypass Enable} {C-Counter-0 Hi Divide} {C-Counter-1 Hi Divide} {C-Counter-2 Hi Divide} {C-Counter-3 Hi Divide} {C-Counter-4 Hi Divide} {C-Counter-5 Hi Divide} {C-Counter-6 Hi Divide} {C-Counter-7 Hi Divide} {C-Counter-8 Hi Divide} {C-Counter-0 Lo Divide} {C-Counter-1 Lo Divide} {C-Counter-2 Lo Divide} {C-Counter-3 Lo Divide} {C-Counter-4 Lo Divide} {C-Counter-5 Lo Divide} {C-Counter-6 Lo Divide} {C-Counter-7 Lo Divide} {C-Counter-8 Lo Divide} {C-Counter-0 Even Duty Enable} {C-Counter-1 Even Duty Enable} {C-Counter-2 Even Duty Enable} {C-Counter-3 Even Duty Enable} {C-Counter-4 Even Duty Enable} {C-Counter-5 Even Duty Enable} {C-Counter-6 Even Duty Enable} {C-Counter-7 Even Duty Enable} {C-Counter-8 Even Duty Enable} {C-Counter-0 Bypass Enable} {C-Counter-1 Bypass Enable} {C-Counter-2 Bypass Enable} {C-Counter-3 Bypass Enable} {C-Counter-4 Bypass Enable} {C-Counter-5 Bypass Enable} {C-Counter-6 Bypass Enable} {C-Counter-7 Bypass Enable} {C-Counter-8 Bypass Enable} {C-Counter-0 Preset} {C-Counter-1 Preset} {C-Counter-2 Preset} {C-Counter-3 Preset} {C-Counter-4 Preset} {C-Counter-5 Preset} {C-Counter-6 Preset} {C-Counter-7 Preset} {C-Counter-8 Preset} {C-Counter-0 Phase Mux Preset} {C-Counter-1 Phase Mux Preset} {C-Counter-2 Phase Mux Preset} {C-Counter-3 Phase Mux Preset} {C-Counter-4 Phase Mux Preset} {C-Counter-5 Phase Mux Preset} {C-Counter-6 Phase Mux Preset} {C-Counter-7 Phase Mux Preset} {C-Counter-8 Phase Mux Preset} {Charge Pump Current} {Bandwidth Control}"
dict set ::pll_all_ip_params parameterTable_values "48 1 {2400.0 MHz} 480 510 1 1 1 1 1 1 1 false 24 24 false false 256 256 false true 240 255 256 256 256 256 256 1 1 240 255 256 256 256 256 256 1 1 false false false false false false false false false false false true true true true true true true 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 pll_cp_setting14 pll_bw_res_setting5"
dict set ::pll_all_ip_params mifTable_names "{The MIF file specified does not yet exist}"
dict set ::pll_all_ip_params pll_m_cnt_basic "1"
dict set ::pll_all_ip_params pll_m_cnt "1"
dict set ::pll_all_ip_params prot_mode "BASIC"
dict set ::pll_all_ip_params protocol_mode "PROTOCOL_MODE_BASIC"
dict set ::pll_all_ip_params m_cnt_hi_div "24"
dict set ::pll_all_ip_params eff_m_cnt "1"
dict set ::pll_all_ip_params multiply_factor "48"
dict set ::pll_all_ip_params use_core_refclk "false"
dict set ::pll_all_ip_params m_cnt_lo_div "24"
dict set ::pll_all_ip_params n_cnt_hi_div "256"
dict set ::pll_all_ip_params n_cnt_lo_div "256"
dict set ::pll_all_ip_params m_cnt_bypass_en "false"
dict set ::pll_all_ip_params n_cnt_bypass_en "true"
dict set ::pll_all_ip_params m_cnt_odd_div_duty_en "false"
dict set ::pll_all_ip_params n_cnt_odd_div_duty_en "false"
dict set ::pll_all_ip_params pll_vco_div "1"
dict set ::pll_all_ip_params pll_cp_current "pll_cp_setting14"
dict set ::pll_all_ip_params pll_bwctrl "pll_bw_res_setting5"
dict set ::pll_all_ip_params pll_fractional_division "1"
dict set ::pll_all_ip_params fractional_vco_multiplier "false"
dict set ::pll_all_ip_params reference_clock_frequency "50.0 MHz"
dict set ::pll_all_ip_params pll_fractional_cout "1"
dict set ::pll_all_ip_params pll_dsm_out_sel "1st_order"
dict set ::pll_all_ip_params operation_mode "direct"
dict set ::pll_all_ip_params number_of_clocks "1"
dict set ::pll_all_ip_params number_of_outclks "1"
dict set ::pll_all_ip_params pll_vcoph_div "1"
dict set ::pll_all_ip_params pll_type "Agilex 3"
dict set ::pll_all_ip_params pll_subtype "General"
dict set ::pll_all_ip_params pll_output_clk_frequency "2400.0 MHz"
dict set ::pll_all_ip_params pll_pfd_frequency "50.0 MHz"
dict set ::pll_all_ip_params mimic_fbclk_type "gclk"
dict set ::pll_all_ip_params pll_bw_sel "Low"
dict set ::pll_all_ip_params pll_slf_rst "false"
dict set ::pll_all_ip_params pll_fbclk_mux_1 "pll_fbclk_mux_1_glb"
dict set ::pll_all_ip_params pll_fbclk_mux_2 "pll_fbclk_mux_2_m_cnt"
dict set ::pll_all_ip_params pll_m_cnt_in_src "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params pll_clkin_0_src "clk_0"
dict set ::pll_all_ip_params refclk1_frequency "0 MHz"
dict set ::pll_all_ip_params pll_clk_loss_sw_en "false"
dict set ::pll_all_ip_params pll_manu_clk_sw_en "false"
dict set ::pll_all_ip_params pll_auto_clk_sw_en "false"
dict set ::pll_all_ip_params pll_clkin_1_src "clk_0"
dict set ::pll_all_ip_params pll_clk_sw_dly "0"
dict set ::pll_all_ip_params pll_extclk_0_cnt_src "pll_extclk_cnt_src_vss"
dict set ::pll_all_ip_params pll_extclk_1_cnt_src "pll_extclk_cnt_src_vss"
dict set ::pll_all_ip_params pll_lock_fltr_cfg "100"
dict set ::pll_all_ip_params pll_unlock_fltr_cfg "2"
dict set ::pll_all_ip_params lock_mode "low_lock_time"
dict set ::pll_all_ip_params clock_to_compensate "0"
dict set ::pll_all_ip_params clock_name_global "false"
dict set ::pll_all_ip_params pll_freqcal_en "true"
dict set ::pll_all_ip_params pll_defer_cal_user_mode "true"
dict set ::pll_all_ip_params dprio_interface_sel "3"
dict set ::pll_all_ip_params merging_permitted "false"
dict set ::pll_all_ip_params bandwidth_mode "BANDWIDTH_MODE_AUTO"
dict set ::pll_all_ip_params compensation_clk_source "COMPENSATION_CLK_SOURCE_UNUSED"
dict set ::pll_all_ip_params compensation_mode "COMPENSATION_MODE_DIRECT"
dict set ::pll_all_ip_params cascade_mode "CASCADE_MODE_STANDALONE"
dict set ::pll_all_ip_params fb_clk_delay "0"
dict set ::pll_all_ip_params fb_clk_fractional_div_den "1"
dict set ::pll_all_ip_params fb_clk_fractional_div_num "1"
dict set ::pll_all_ip_params fb_clk_fractional_div_value "1"
dict set ::pll_all_ip_params fb_clk_m_div "0"
dict set ::pll_all_ip_params out_clk_cascading_source "OUT_CLK_CASCADING_SOURCE_UNUSED"
dict set ::pll_all_ip_params out_clk_external_0_source "OUT_CLK_EXTERNAL_0_SOURCE_UNUSED"
dict set ::pll_all_ip_params out_clk_external_1_source "OUT_CLK_EXTERNAL_1_SOURCE_UNUSED"
dict set ::pll_all_ip_params out_clk_periph_0_delay "0"
dict set ::pll_all_ip_params out_clk_periph_0_en "true"
dict set ::pll_all_ip_params out_clk_periph_1_delay "0"
dict set ::pll_all_ip_params out_clk_periph_1_en "true"
dict set ::pll_all_ip_params ref_clk_delay "0"
dict set ::pll_all_ip_params ref_clk_n_div "1"
dict set ::pll_all_ip_params set_dutycycle "SET_DUTYCYCLE_FRACTION"
dict set ::pll_all_ip_params set_fractional "SET_FRACTIONAL_FRACTION"
dict set ::pll_all_ip_params set_freq "SET_FREQ_DIVISION"
dict set ::pll_all_ip_params set_phase "SET_PHASE_NUM_SHIFTS"
dict set ::pll_all_ip_params pfd_clk_freq "100000000"
dict set ::pll_all_ip_params vco_clk_freq "1000000000"
dict set ::pll_all_ip_params c_cnt_hi_div0 "240"
dict set ::pll_all_ip_params c_cnt_hi_div1 "255"
dict set ::pll_all_ip_params c_cnt_hi_div2 "256"
dict set ::pll_all_ip_params c_cnt_hi_div3 "256"
dict set ::pll_all_ip_params c_cnt_hi_div4 "256"
dict set ::pll_all_ip_params c_cnt_hi_div5 "256"
dict set ::pll_all_ip_params c_cnt_hi_div6 "256"
dict set ::pll_all_ip_params c_cnt_hi_div7 "1"
dict set ::pll_all_ip_params c_cnt_hi_div8 "1"
dict set ::pll_all_ip_params c_cnt_hi_div9 "1"
dict set ::pll_all_ip_params c_cnt_hi_div10 "1"
dict set ::pll_all_ip_params c_cnt_hi_div11 "1"
dict set ::pll_all_ip_params c_cnt_hi_div12 "1"
dict set ::pll_all_ip_params c_cnt_hi_div13 "1"
dict set ::pll_all_ip_params c_cnt_hi_div14 "1"
dict set ::pll_all_ip_params c_cnt_hi_div15 "1"
dict set ::pll_all_ip_params c_cnt_hi_div16 "1"
dict set ::pll_all_ip_params c_cnt_hi_div17 "1"
dict set ::pll_all_ip_params c_cnt_lo_div0 "240"
dict set ::pll_all_ip_params c_cnt_lo_div1 "255"
dict set ::pll_all_ip_params c_cnt_lo_div2 "256"
dict set ::pll_all_ip_params c_cnt_lo_div3 "256"
dict set ::pll_all_ip_params c_cnt_lo_div4 "256"
dict set ::pll_all_ip_params c_cnt_lo_div5 "256"
dict set ::pll_all_ip_params c_cnt_lo_div6 "256"
dict set ::pll_all_ip_params c_cnt_lo_div7 "1"
dict set ::pll_all_ip_params c_cnt_lo_div8 "1"
dict set ::pll_all_ip_params c_cnt_lo_div9 "1"
dict set ::pll_all_ip_params c_cnt_lo_div10 "1"
dict set ::pll_all_ip_params c_cnt_lo_div11 "1"
dict set ::pll_all_ip_params c_cnt_lo_div12 "1"
dict set ::pll_all_ip_params c_cnt_lo_div13 "1"
dict set ::pll_all_ip_params c_cnt_lo_div14 "1"
dict set ::pll_all_ip_params c_cnt_lo_div15 "1"
dict set ::pll_all_ip_params c_cnt_lo_div16 "1"
dict set ::pll_all_ip_params c_cnt_lo_div17 "1"
dict set ::pll_all_ip_params c_cnt_prst0 "1"
dict set ::pll_all_ip_params c_cnt_prst1 "1"
dict set ::pll_all_ip_params c_cnt_prst2 "1"
dict set ::pll_all_ip_params c_cnt_prst3 "1"
dict set ::pll_all_ip_params c_cnt_prst4 "1"
dict set ::pll_all_ip_params c_cnt_prst5 "1"
dict set ::pll_all_ip_params c_cnt_prst6 "1"
dict set ::pll_all_ip_params c_cnt_prst7 "1"
dict set ::pll_all_ip_params c_cnt_prst8 "1"
dict set ::pll_all_ip_params c_cnt_prst9 "1"
dict set ::pll_all_ip_params c_cnt_prst10 "1"
dict set ::pll_all_ip_params c_cnt_prst11 "1"
dict set ::pll_all_ip_params c_cnt_prst12 "1"
dict set ::pll_all_ip_params c_cnt_prst13 "1"
dict set ::pll_all_ip_params c_cnt_prst14 "1"
dict set ::pll_all_ip_params c_cnt_prst15 "1"
dict set ::pll_all_ip_params c_cnt_prst16 "1"
dict set ::pll_all_ip_params c_cnt_prst17 "1"
dict set ::pll_all_ip_params c_cnt_ph_mux_prst0 "0"
dict set ::pll_all_ip_params c_cnt_ph_mux_prst1 "0"
dict set ::pll_all_ip_params c_cnt_ph_mux_prst2 "0"
dict set ::pll_all_ip_params c_cnt_ph_mux_prst3 "0"
dict set ::pll_all_ip_params c_cnt_ph_mux_prst4 "0"
dict set ::pll_all_ip_params c_cnt_ph_mux_prst5 "0"
dict set ::pll_all_ip_params c_cnt_ph_mux_prst6 "0"
dict set ::pll_all_ip_params c_cnt_ph_mux_prst7 "0"
dict set ::pll_all_ip_params c_cnt_ph_mux_prst8 "0"
dict set ::pll_all_ip_params c_cnt_ph_mux_prst9 "0"
dict set ::pll_all_ip_params c_cnt_ph_mux_prst10 "0"
dict set ::pll_all_ip_params c_cnt_ph_mux_prst11 "0"
dict set ::pll_all_ip_params c_cnt_ph_mux_prst12 "0"
dict set ::pll_all_ip_params c_cnt_ph_mux_prst13 "0"
dict set ::pll_all_ip_params c_cnt_ph_mux_prst14 "0"
dict set ::pll_all_ip_params c_cnt_ph_mux_prst15 "0"
dict set ::pll_all_ip_params c_cnt_ph_mux_prst16 "0"
dict set ::pll_all_ip_params c_cnt_ph_mux_prst17 "0"
dict set ::pll_all_ip_params c_cnt_in_src0 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params c_cnt_in_src1 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params c_cnt_in_src2 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params c_cnt_in_src3 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params c_cnt_in_src4 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params c_cnt_in_src5 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params c_cnt_in_src6 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params c_cnt_in_src7 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params c_cnt_in_src8 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params c_cnt_in_src9 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params c_cnt_in_src10 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params c_cnt_in_src11 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params c_cnt_in_src12 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params c_cnt_in_src13 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params c_cnt_in_src14 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params c_cnt_in_src15 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params c_cnt_in_src16 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params c_cnt_in_src17 "c_m_cnt_in_src_ph_mux_clk"
dict set ::pll_all_ip_params c_cnt_bypass_en0 "false"
dict set ::pll_all_ip_params c_cnt_bypass_en1 "false"
dict set ::pll_all_ip_params c_cnt_bypass_en2 "true"
dict set ::pll_all_ip_params c_cnt_bypass_en3 "true"
dict set ::pll_all_ip_params c_cnt_bypass_en4 "true"
dict set ::pll_all_ip_params c_cnt_bypass_en5 "true"
dict set ::pll_all_ip_params c_cnt_bypass_en6 "true"
dict set ::pll_all_ip_params c_cnt_bypass_en7 "true"
dict set ::pll_all_ip_params c_cnt_bypass_en8 "true"
dict set ::pll_all_ip_params c_cnt_bypass_en9 "true"
dict set ::pll_all_ip_params c_cnt_bypass_en10 "true"
dict set ::pll_all_ip_params c_cnt_bypass_en11 "true"
dict set ::pll_all_ip_params c_cnt_bypass_en12 "true"
dict set ::pll_all_ip_params c_cnt_bypass_en13 "true"
dict set ::pll_all_ip_params c_cnt_bypass_en14 "true"
dict set ::pll_all_ip_params c_cnt_bypass_en15 "true"
dict set ::pll_all_ip_params c_cnt_bypass_en16 "true"
dict set ::pll_all_ip_params c_cnt_bypass_en17 "true"
dict set ::pll_all_ip_params c_cnt_odd_div_duty_en0 "false"
dict set ::pll_all_ip_params c_cnt_odd_div_duty_en1 "false"
dict set ::pll_all_ip_params c_cnt_odd_div_duty_en2 "false"
dict set ::pll_all_ip_params c_cnt_odd_div_duty_en3 "false"
dict set ::pll_all_ip_params c_cnt_odd_div_duty_en4 "false"
dict set ::pll_all_ip_params c_cnt_odd_div_duty_en5 "false"
dict set ::pll_all_ip_params c_cnt_odd_div_duty_en6 "false"
dict set ::pll_all_ip_params c_cnt_odd_div_duty_en7 "false"
dict set ::pll_all_ip_params c_cnt_odd_div_duty_en8 "false"
dict set ::pll_all_ip_params c_cnt_odd_div_duty_en9 "false"
dict set ::pll_all_ip_params c_cnt_odd_div_duty_en10 "false"
dict set ::pll_all_ip_params c_cnt_odd_div_duty_en11 "false"
dict set ::pll_all_ip_params c_cnt_odd_div_duty_en12 "false"
dict set ::pll_all_ip_params c_cnt_odd_div_duty_en13 "false"
dict set ::pll_all_ip_params c_cnt_odd_div_duty_en14 "false"
dict set ::pll_all_ip_params c_cnt_odd_div_duty_en15 "false"
dict set ::pll_all_ip_params c_cnt_odd_div_duty_en16 "false"
dict set ::pll_all_ip_params c_cnt_odd_div_duty_en17 "false"
dict set ::pll_all_ip_params output_clock_frequency0 "5.0 MHz"
dict set ::pll_all_ip_params output_clock_frequency1 "0 ps"
dict set ::pll_all_ip_params output_clock_frequency2 "0 ps"
dict set ::pll_all_ip_params output_clock_frequency3 "0 ps"
dict set ::pll_all_ip_params output_clock_frequency4 "0 ps"
dict set ::pll_all_ip_params output_clock_frequency5 "0 ps"
dict set ::pll_all_ip_params output_clock_frequency6 "0 ps"
dict set ::pll_all_ip_params output_clock_frequency7 "0 MHz"
dict set ::pll_all_ip_params output_clock_frequency8 "0 MHz"
dict set ::pll_all_ip_params output_clock_frequency9 "0 MHz"
dict set ::pll_all_ip_params output_clock_frequency10 "0 MHz"
dict set ::pll_all_ip_params output_clock_frequency11 "0 MHz"
dict set ::pll_all_ip_params output_clock_frequency12 "0 MHz"
dict set ::pll_all_ip_params output_clock_frequency13 "0 MHz"
dict set ::pll_all_ip_params output_clock_frequency14 "0 MHz"
dict set ::pll_all_ip_params output_clock_frequency15 "0 MHz"
dict set ::pll_all_ip_params output_clock_frequency16 "0 MHz"
dict set ::pll_all_ip_params output_clock_frequency17 "0 MHz"
dict set ::pll_all_ip_params phase_shift0 "0 ps"
dict set ::pll_all_ip_params phase_shift1 "0 ps"
dict set ::pll_all_ip_params phase_shift2 "0 ps"
dict set ::pll_all_ip_params phase_shift3 "0 ps"
dict set ::pll_all_ip_params phase_shift4 "0 ps"
dict set ::pll_all_ip_params phase_shift5 "0 ps"
dict set ::pll_all_ip_params phase_shift6 "0 ps"
dict set ::pll_all_ip_params phase_shift7 "0 ps"
dict set ::pll_all_ip_params phase_shift8 "0 ps"
dict set ::pll_all_ip_params phase_shift9 "0 ps"
dict set ::pll_all_ip_params phase_shift10 "0 ps"
dict set ::pll_all_ip_params phase_shift11 "0 ps"
dict set ::pll_all_ip_params phase_shift12 "0 ps"
dict set ::pll_all_ip_params phase_shift13 "0 ps"
dict set ::pll_all_ip_params phase_shift14 "0 ps"
dict set ::pll_all_ip_params phase_shift15 "0 ps"
dict set ::pll_all_ip_params phase_shift16 "0 ps"
dict set ::pll_all_ip_params phase_shift17 "0 ps"
dict set ::pll_all_ip_params duty_cycle0 "50"
dict set ::pll_all_ip_params duty_cycle1 "50"
dict set ::pll_all_ip_params duty_cycle2 "50"
dict set ::pll_all_ip_params duty_cycle3 "50"
dict set ::pll_all_ip_params duty_cycle4 "50"
dict set ::pll_all_ip_params duty_cycle5 "50"
dict set ::pll_all_ip_params duty_cycle6 "50"
dict set ::pll_all_ip_params duty_cycle7 "50"
dict set ::pll_all_ip_params duty_cycle8 "50"
dict set ::pll_all_ip_params duty_cycle9 "50"
dict set ::pll_all_ip_params duty_cycle10 "50"
dict set ::pll_all_ip_params duty_cycle11 "50"
dict set ::pll_all_ip_params duty_cycle12 "50"
dict set ::pll_all_ip_params duty_cycle13 "50"
dict set ::pll_all_ip_params duty_cycle14 "50"
dict set ::pll_all_ip_params duty_cycle15 "50"
dict set ::pll_all_ip_params duty_cycle16 "50"
dict set ::pll_all_ip_params duty_cycle17 "50"
dict set ::pll_all_ip_params clock_name_0 "outclk0"
dict set ::pll_all_ip_params clock_name_global_0 "false"
dict set ::pll_all_ip_params clock_name_global_1 "false"
dict set ::pll_all_ip_params clock_name_global_2 "false"
dict set ::pll_all_ip_params clock_name_global_3 "false"
dict set ::pll_all_ip_params clock_name_global_4 "false"
dict set ::pll_all_ip_params clock_name_global_5 "false"
dict set ::pll_all_ip_params clock_name_global_6 "false"
dict set ::pll_all_ip_params clock_name_global_7 "false"
dict set ::pll_all_ip_params clock_name_global_8 "false"
dict set ::pll_all_ip_params divide_factor0 "1"
dict set ::pll_all_ip_params divide_factor1 "1"
dict set ::pll_all_ip_params divide_factor2 "1"
dict set ::pll_all_ip_params divide_factor3 "1"
dict set ::pll_all_ip_params divide_factor4 "1"
dict set ::pll_all_ip_params divide_factor5 "1"
dict set ::pll_all_ip_params divide_factor6 "1"
dict set ::pll_all_ip_params divide_factor7 "1"
dict set ::pll_all_ip_params divide_factor8 "1"
dict set ::pll_all_ip_params out_clk_0_c_div "1"
dict set ::pll_all_ip_params out_clk_1_c_div "1"
dict set ::pll_all_ip_params out_clk_2_c_div "1"
dict set ::pll_all_ip_params out_clk_3_c_div "1"
dict set ::pll_all_ip_params out_clk_4_c_div "1"
dict set ::pll_all_ip_params out_clk_5_c_div "1"
dict set ::pll_all_ip_params out_clk_6_c_div "1"
dict set ::pll_all_ip_params out_clk_0_core_en "true"
dict set ::pll_all_ip_params out_clk_1_core_en "true"
dict set ::pll_all_ip_params out_clk_2_core_en "true"
dict set ::pll_all_ip_params out_clk_3_core_en "true"
dict set ::pll_all_ip_params out_clk_4_core_en "true"
dict set ::pll_all_ip_params out_clk_5_core_en "true"
dict set ::pll_all_ip_params out_clk_6_core_en "true"
dict set ::pll_all_ip_params out_clk_0_delay "0"
dict set ::pll_all_ip_params out_clk_1_delay "0"
dict set ::pll_all_ip_params out_clk_2_delay "0"
dict set ::pll_all_ip_params out_clk_3_delay "0"
dict set ::pll_all_ip_params out_clk_4_delay "0"
dict set ::pll_all_ip_params out_clk_5_delay "0"
dict set ::pll_all_ip_params out_clk_6_delay "0"
dict set ::pll_all_ip_params out_clk_0_dutycycle_den "2"
dict set ::pll_all_ip_params out_clk_1_dutycycle_den "2"
dict set ::pll_all_ip_params out_clk_2_dutycycle_den "2"
dict set ::pll_all_ip_params out_clk_3_dutycycle_den "2"
dict set ::pll_all_ip_params out_clk_4_dutycycle_den "2"
dict set ::pll_all_ip_params out_clk_5_dutycycle_den "2"
dict set ::pll_all_ip_params out_clk_6_dutycycle_den "2"
dict set ::pll_all_ip_params out_clk_0_dutycycle_num "1"
dict set ::pll_all_ip_params out_clk_1_dutycycle_num "1"
dict set ::pll_all_ip_params out_clk_2_dutycycle_num "1"
dict set ::pll_all_ip_params out_clk_3_dutycycle_num "1"
dict set ::pll_all_ip_params out_clk_4_dutycycle_num "1"
dict set ::pll_all_ip_params out_clk_5_dutycycle_num "1"
dict set ::pll_all_ip_params out_clk_6_dutycycle_num "1"
dict set ::pll_all_ip_params out_clk_0_phase_shifts "0"
dict set ::pll_all_ip_params out_clk_1_phase_shifts "0"
dict set ::pll_all_ip_params out_clk_2_phase_shifts "0"
dict set ::pll_all_ip_params out_clk_3_phase_shifts "0"
dict set ::pll_all_ip_params out_clk_4_phase_shifts "0"
dict set ::pll_all_ip_params out_clk_5_phase_shifts "0"
dict set ::pll_all_ip_params out_clk_6_phase_shifts "0"
dict set ::pll_all_ip_params ref_clk_0_freq "100000000"
dict set ::pll_all_ip_params ref_clk_1_freq "100000000"
dict set ::pll_all_ip_params out_clk_0_freq "1000000000"
dict set ::pll_all_ip_params out_clk_1_freq "1000000000"
dict set ::pll_all_ip_params out_clk_2_freq "1000000000"
dict set ::pll_all_ip_params out_clk_3_freq "1000000000"
dict set ::pll_all_ip_params out_clk_4_freq "1000000000"
dict set ::pll_all_ip_params out_clk_5_freq "1000000000"
dict set ::pll_all_ip_params out_clk_6_freq "1000000000"
dict set ::pll_all_ip_params out_clk_0_phase_ps "1000000000"
dict set ::pll_all_ip_params out_clk_1_phase_ps "1000000000"
dict set ::pll_all_ip_params out_clk_2_phase_ps "1000000000"
dict set ::pll_all_ip_params out_clk_3_phase_ps "1000000000"
dict set ::pll_all_ip_params out_clk_4_phase_ps "1000000000"
dict set ::pll_all_ip_params out_clk_5_phase_ps "1000000000"
dict set ::pll_all_ip_params out_clk_6_phase_ps "1000000000"
dict set ::pll_all_ip_params pll_tclk_mux_en "false"
dict set ::pll_all_ip_params pll_tclk_sel "pll_tclk_m_src"
dict set ::pll_all_ip_params pll_vco_freq_band_0 "pll_freq_clk0_band18"
dict set ::pll_all_ip_params pll_vco_freq_band_1 "pll_freq_clk1_band18"
dict set ::pll_all_ip_params pll_freqcal_req_flag "true"
dict set ::pll_all_ip_params cal_converge "false"
dict set ::pll_all_ip_params cal_error "cal_clean"
dict set ::pll_all_ip_params pll_cal_done "false"
dict set ::pll_all_ip_params include_iossm "false"
dict set ::pll_all_ip_params cal_code_hex_file "iossm.hex"
dict set ::pll_all_ip_params parameter_table_hex_file "seq_params_sim.hex"
dict set ::pll_all_ip_params iossm_nios_sim_clk_period_ps "1333"
dict set ::pll_all_ip_params hp_number_of_family_allowable_clocks "9"
dict set ::pll_all_ip_params hp_previous_num_clocks "1"
dict set ::pll_all_ip_params hp_actual_vco_frequency_fp "600.0"
dict set ::pll_all_ip_params hp_qsys_scripting_mode "false"
dict set ::pll_all_ip_params hp_actual_output_clock_frequency_fp0 "5.0"
dict set ::pll_all_ip_params hp_actual_output_clock_frequency_fp1 "100.0"
dict set ::pll_all_ip_params hp_actual_output_clock_frequency_fp2 "100.0"
dict set ::pll_all_ip_params hp_actual_output_clock_frequency_fp3 "100.0"
dict set ::pll_all_ip_params hp_actual_output_clock_frequency_fp4 "100.0"
dict set ::pll_all_ip_params hp_actual_output_clock_frequency_fp5 "100.0"
dict set ::pll_all_ip_params hp_actual_output_clock_frequency_fp6 "100.0"
dict set ::pll_all_ip_params hp_actual_output_clock_frequency_fp7 "100.0"
dict set ::pll_all_ip_params hp_actual_output_clock_frequency_fp8 "100.0"
dict set ::pll_all_ip_params hp_actual_output_clock_frequency_fp9 "100.0"
dict set ::pll_all_ip_params hp_actual_output_clock_frequency_fp10 "100.0"
dict set ::pll_all_ip_params hp_actual_output_clock_frequency_fp11 "100.0"
dict set ::pll_all_ip_params hp_actual_output_clock_frequency_fp12 "100.0"
dict set ::pll_all_ip_params hp_actual_output_clock_frequency_fp13 "100.0"
dict set ::pll_all_ip_params hp_actual_output_clock_frequency_fp14 "100.0"
dict set ::pll_all_ip_params hp_actual_output_clock_frequency_fp15 "100.0"
dict set ::pll_all_ip_params hp_actual_output_clock_frequency_fp16 "100.0"
dict set ::pll_all_ip_params hp_actual_output_clock_frequency_fp17 "100.0"
dict set ::pll_all_ip_params hp_actual_phase_shift_fp0 "0.0"
dict set ::pll_all_ip_params hp_actual_phase_shift_fp1 "0.0"
dict set ::pll_all_ip_params hp_actual_phase_shift_fp2 "0.0"
dict set ::pll_all_ip_params hp_actual_phase_shift_fp3 "0.0"
dict set ::pll_all_ip_params hp_actual_phase_shift_fp4 "0.0"
dict set ::pll_all_ip_params hp_actual_phase_shift_fp5 "0.0"
dict set ::pll_all_ip_params hp_actual_phase_shift_fp6 "0.0"
dict set ::pll_all_ip_params hp_actual_phase_shift_fp7 "0.0"
dict set ::pll_all_ip_params hp_actual_phase_shift_fp8 "0.0"
dict set ::pll_all_ip_params hp_actual_phase_shift_fp9 "0.0"
dict set ::pll_all_ip_params hp_actual_phase_shift_fp10 "0.0"
dict set ::pll_all_ip_params hp_actual_phase_shift_fp11 "0.0"
dict set ::pll_all_ip_params hp_actual_phase_shift_fp12 "0.0"
dict set ::pll_all_ip_params hp_actual_phase_shift_fp13 "0.0"
dict set ::pll_all_ip_params hp_actual_phase_shift_fp14 "0.0"
dict set ::pll_all_ip_params hp_actual_phase_shift_fp15 "0.0"
dict set ::pll_all_ip_params hp_actual_phase_shift_fp16 "0.0"
dict set ::pll_all_ip_params hp_actual_phase_shift_fp17 "0.0"
dict set ::pll_all_ip_params hp_actual_duty_cycle_fp0 "50.0"
dict set ::pll_all_ip_params hp_actual_duty_cycle_fp1 "50.0"
dict set ::pll_all_ip_params hp_actual_duty_cycle_fp2 "50.0"
dict set ::pll_all_ip_params hp_actual_duty_cycle_fp3 "50.0"
dict set ::pll_all_ip_params hp_actual_duty_cycle_fp4 "50.0"
dict set ::pll_all_ip_params hp_actual_duty_cycle_fp5 "50.0"
dict set ::pll_all_ip_params hp_actual_duty_cycle_fp6 "50.0"
dict set ::pll_all_ip_params hp_actual_duty_cycle_fp7 "50.0"
dict set ::pll_all_ip_params hp_actual_duty_cycle_fp8 "50.0"
dict set ::pll_all_ip_params hp_actual_duty_cycle_fp9 "50.0"
dict set ::pll_all_ip_params hp_actual_duty_cycle_fp10 "50.0"
dict set ::pll_all_ip_params hp_actual_duty_cycle_fp11 "50.0"
dict set ::pll_all_ip_params hp_actual_duty_cycle_fp12 "50.0"
dict set ::pll_all_ip_params hp_actual_duty_cycle_fp13 "50.0"
dict set ::pll_all_ip_params hp_actual_duty_cycle_fp14 "50.0"
dict set ::pll_all_ip_params hp_actual_duty_cycle_fp15 "50.0"
dict set ::pll_all_ip_params hp_actual_duty_cycle_fp16 "50.0"
dict set ::pll_all_ip_params hp_actual_duty_cycle_fp17 "50.0"
 13 0 2 C: 8 projects 4 FPGA 5 intel 2 A3 7 counter 3 src 4 qsys 5 iopll 5 iopll 17 altera_iopll_2000 5 synth 46 iopll_altera_iopll_2000_n6jjr3a_parameters.tcl 5668 # PLL Parameters

#USER W A R N I N G !
#USER The PLL parameters are statically defined in this
#USER file at generation time!
#USER To ensure timing constraints and timing reports are correct, when you make 
#USER any changes to the PLL component using the Qsys,
#USER apply those changes to the PLL parameters in this file

set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_corename iopll_altera_iopll_2000_n6jjr3a

set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_base_clock_data [dict create]
set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data [dict create]
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_base_clock_data refclk pattern __inst_name__|tennm_ph2_iopll|ref_clk0
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_base_clock_data refclk node_type pin
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_base_clock_data refclk pin_id ""
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_base_clock_data refclk pin_node_name ""
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_base_clock_data refclk port_id ""
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_base_clock_data refclk port_node_name ""
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_base_clock_data refclk is_fpga_pin false
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_base_clock_data refclk is_main_refclk true
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_base_clock_data refclk exists false
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_base_clock_data refclk name "__inst_name___refclk"
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_base_clock_data refclk period 20.000
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_base_clock_data refclk half_period 10.000
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data n_cnt_clock pattern __inst_name__|tennm_ph2_iopll~ncntr_reg
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data n_cnt_clock node_type register
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data n_cnt_clock pin_id ""
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data n_cnt_clock pin_node_name ""
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data n_cnt_clock is_valid false
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data n_cnt_clock exists false
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data n_cnt_clock name "__inst_name___n_cnt_clk"
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data n_cnt_clock src refclk
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data n_cnt_clock master ""
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data n_cnt_clock multiply_by 1
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data n_cnt_clock divide_by 1
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data n_cnt_clock phase 0.000
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data n_cnt_clock duty_cycle 50
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data m_cnt_clock pattern __inst_name__|tennm_ph2_iopll~mcntr_reg
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data m_cnt_clock node_type register
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data m_cnt_clock pin_id ""
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data m_cnt_clock pin_node_name ""
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data m_cnt_clock is_valid false
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data m_cnt_clock exists false
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data m_cnt_clock name "__inst_name___m_cnt_clk"
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data m_cnt_clock src refclk
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data m_cnt_clock master ""
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data m_cnt_clock multiply_by 1
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data m_cnt_clock divide_by 48
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data m_cnt_clock phase 0.000
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data m_cnt_clock duty_cycle 50
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data outclk0 pattern __inst_name__|tennm_ph2_iopll|out_clk\[0\]
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data outclk0 node_type pin
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data outclk0 pin_id ""
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data outclk0 pin_node_name ""
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data outclk0 is_valid false
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data outclk0 exists false
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data outclk0 name __inst_name___outclk0
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data outclk0 src refclk
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data outclk0 master ""
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data outclk0 multiply_by 48
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data outclk0 divide_by 480
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data outclk0 phase 0.000
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data outclk0 duty_cycle 50
dict set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data outclk0 counter_index 0
 13 0 2 C: 8 projects 4 FPGA 5 intel 2 A3 7 counter 3 src 4 qsys 5 iopll 5 iopll 17 altera_iopll_2000 5 synth 43 iopll_altera_iopll_2000_n6jjr3a_pin_map.tcl 50794 # (C) 2001-2025 Altera Corporation. All rights reserved.
# Your use of Altera Corporation's design tools, logic functions and other 
# software and tools, and its AMPP partner logic functions, and any output 
# files from any of the foregoing (including device programming or simulation 
# files), and any associated documentation or information are expressly subject 
# to the terms and conditions of the Altera Program License Subscription 
# Agreement, Altera IP License Agreement, or other applicable 
# license agreement, including, without limitation, that your use is for the 
# sole purpose of programming logic devices manufactured by Altera and sold by 
# Altera or its authorized distributors.  Please refer to the applicable 
# agreement for further details.


#####################################################################
#
# THIS IS AN AUTO-GENERATED FILE!
# -------------------------------
# If you modify this files, all your changes will be lost if you
# regenerate the core!
#
# FILE DESCRIPTION
# ----------------
# This file contains the traversal routines that are used by
# iopll_altera_iopll_2000_n6jjr3a.sdc scripts. 
#
# These routines are only meant to support the SDC. 
# Trying to using them in a different context can have unexpected 
# results.

set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_corename_debug 0

set script_dir [file dirname [info script]]

source [file join $script_dir iopll_altera_iopll_2000_n6jjr3a_parameters.tcl]

proc get_warnings_disabled {} {
    set local_disable_warnings true
    set inis [split [get_global_assignment -name INI_VARS] ";"]
    foreach ini $inis {
        set ini_lst [split $ini "="]
        lassign $ini_lst ini_name ini_value
        if {$ini_name == "disable_warnings" && $ini_value == "off"} {
            set local_disable_warnings false
            break
        }
    }
    return $local_disable_warnings 
}
set ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_corename_disable_warnings [get_warnings_disabled]

proc ai_get_timequest_name { full_hier_name } {
    # Input: lib1:inst1|lib2:inst2|lib3:inst3
    # Output: inst1|inst2|inst3
    set tq_name ""
    set tq_name_list {}
    set lib_inst_pair_list [split $full_hier_name "|"]

    foreach i_lib_inst_pair_str $lib_inst_pair_list {
        set i_lib_inst_pair [split $i_lib_inst_pair_str ":"]

        if {[llength $i_lib_inst_pair] > 1} {
            # take the 2nd element and onwards
            lappend tq_name_list [join [lrange $i_lib_inst_pair 1 end] :]
        } else {
            # if there is only 1 element, probably the last hierarchy which is a port or something like that.
            lappend tq_name_list [lindex $i_lib_inst_pair end]
        }
    }

    set tq_name [join $tq_name_list "|"]
    return $tq_name
}

# ----------------------------------------------------------------
#
proc ai_post_message {msg_type msg {msg_context sta_only}} {
#
# Description: Posts a message to Quartus, depending on 
# msg_context (sta_only, all)
#              
#              
#
# ----------------------------------------------------------------

    if {$msg_type == "debug"} {
        if {$::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_corename_debug} {
            puts $msg
        }
    } else {
        if {$msg_context == "all"} {
            post_message -type $msg_type $msg
        } elseif {$msg_context == "sta_only"} {
            if {$::TimeQuestInfo(nameofexecutable) == "quartus_sta"} {
                post_message -type $msg_type $msg
            }
        }
    }
}

# ----------------------------------------------------------------
#
proc ai_are_entity_names_on { } {
#
# Description: Determines if the entity names option is on
#
# ----------------------------------------------------------------
    return [set_project_mode -is_show_entity]    
}

# ----------------------------------------------------------------
#
proc ai_initialize_pll_db { pll_db_par } {
#
# Description: Gets the instances of this particular PLL IP and creates the pin
#              cache
#
# ----------------------------------------------------------------
    upvar $pll_db_par local_pll_db

    global ::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_corename

    ai_post_message info "Initializing PLL database for CORE $::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_corename"
    set instance_list [ai_get_core_instance_list $::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_corename]

    foreach instname $instance_list {
        ai_post_message info "Finding port-to-pin mapping for CORE: $::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_corename INSTANCE: $instname"

        # Some PLL atoms get merged and are no longer present
        if { [ai_get_pll_atom $instname] eq "" } { continue }

        set clock_data_dicts [ai_get_pll_pins $instname]
        lassign $clock_data_dicts base_clock_data_dict gen_clock_data_dict
        print_clock_data $base_clock_data_dict
        print_clock_data $gen_clock_data_dict 

        set local_pll_db($instname) $clock_data_dicts 
    }
}

# ----------------------------------------------------------------
#
proc ai_get_core_instance_list {corename} {
#
# Description: Converts node names from one style to another style
#
# ----------------------------------------------------------------
    set full_instance_list [ai_get_core_full_instance_list $corename]
    set instance_list [list]

    foreach inst $full_instance_list {
        if {[lsearch $instance_list [escape_brackets $inst]] == -1} {
            ai_post_message debug "Found instance:  $inst"
            lappend instance_list $inst
        }
    }
    return $instance_list
}

# ----------------------------------------------------------------
#
proc ai_get_core_full_instance_list {corename} {
#
# Description: Finds the instances of the particular IP by searching through the cells
#
# ----------------------------------------------------------------
    set instance_list [list]

    set instance_list_pre [design::get_instances -entity $corename]

    foreach instance $instance_list_pre {
        lappend instance_list [ai_get_timequest_name $instance]
    }

    if {[ llength $instance_list ] == 0} {

        if {!$::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_corename_disable_warnings} {
            ai_post_message warning "The auto-constraining script was not able to detect any instance for core < $corename >" all
            ai_post_message warning "Verify the following:"
            ai_post_message warning " The core < $corename > is instantiated within another component (wrapper)" all
            ai_post_message warning " The core is not the top-level of the project" all
        }
    }

    return $instance_list
}
proc ai_get_registers {pattern} {
    if {$::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_corename_disable_warnings} {
        return [get_registers -nowarn -no_duplicates $pattern]
    } else {
        return [get_registers -no_duplicates $pattern]
    }
}
proc ai_get_pins {pattern} {
    if {$::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_corename_disable_warnings} {
        return [get_pins -nowarn -no_duplicates $pattern]
    } else {
        return [get_pins -no_duplicates $pattern]
    }
}
proc ai_get_pin_node_name {pattern} {
    set pin_collection [ai_get_pins $pattern]
    set num_pins [get_collection_size $pin_collection]
    if {$num_pins == 1} {
        foreach_in_collection id $pin_collection {
            set node_name [get_node_info -name $id]         
            return $node_name
        }
    } 
    return ""
 
}

# ----------------------------------------------------------------
#
proc ai_get_collection_size_from_pattern {pattern} {
#
# Description: Takes a string regex and gets the pin collection.
#
# ----------------------------------------------------------------
    set pin_collection [get_pins -no_duplicates $pattern]
    return [get_collection_size $pin_collection]
}

# ----------------------------------------------------------------
#
proc print_clock_data {d} {
#
# Description: Prints clock data dict
#
# ---------------------------------------------------------------- 
    dict for {clock_key info} $d {
        ai_post_message debug "Clock:  $clock_key"
        dict for {key val} $info {
            ai_post_message debug "   $key: $val"
        }
    }
}

# ----------------------------------------------------------------
#
proc ai_subst_instname {clock_data_dict patt} {
#
# Description: Takes a string regex and gets the pin collection.
#
# ----------------------------------------------------------------
    dict for {clock_key info} $clock_data_dict {
        dict with info {
            regsub -all "__inst_name__" $name $patt new_name
            regsub -all "__inst_name__" $pattern $patt new_pattern
            
            dict set clock_data_dict $clock_key name $new_name
            dict set clock_data_dict $clock_key pattern $new_pattern
            
            if {[dict exists $clock_data_dict $clock_key "through_pin" ]} {
                regsub -all "__inst_name__" $through_pin $patt new_through_pin
                dict set clock_data_dict $clock_key through_pin $new_through_pin
            }
        }
    }
    return $clock_data_dict
}
# ----------------------------------------------------------------
#
proc ai_update_genclk_div_mult {clock_data_dict pll_parameters_dict} {
#
# Description: Updates the dict with div/mult values collected from
# the PLL's atom parameters.
#
# ----------------------------------------------------------------
    set compensated_counter_div 0
    set clock_to_compensate [dict get $pll_parameters_dict clock_to_compensate]
    # Loop over dict to find the compensated counter's div value first.
    dict for {clock_key info} $clock_data_dict {
        dict with info {
            if {[info exists counter_index]} { 
                set clk_string_length [string length $clock_to_compensate]
                set clock_to_compensate_index [string index $clock_to_compensate [expr {$clk_string_length - 1}] ]
                if {$counter_index == $clock_to_compensate_index} {
                    set compensated_counter_div [dict get $pll_parameters_dict c${counter_index}_total]
                }
            }
        }
        unset -nocomplain counter_index
    }
    dict for {clock_key info} $clock_data_dict {
        dict with info {
            ai_post_message debug "Getting div/mult factors for clock $clock_key" 
            set ccnt -1
            if {[info exists counter_index]} {
                set ccnt [dict get $pll_parameters_dict c${counter_index}_total]
                set ccnt_dc [dict get $pll_parameters_dict duty_cycle${counter_index}]
            } else {
                set counter_index -1
                set ccnt_dc 50
            }
            set mult_div [ai_get_mult_div_factors \
                $clock_key \
                $src \
                [dict get $pll_parameters_dict n_total] \
                [dict get $pll_parameters_dict m_total] \
                $ccnt \
                $counter_index \
                $compensated_counter_div \
                [dict get $pll_parameters_dict compensation_mode] \
                [dict get $pll_parameters_dict clock_to_compensate]]

            lassign $mult_div mult div

            ai_post_message debug "Setting mult_div factors for: $clock_key to $mult/$div"

            dict set clock_data_dict $clock_key multiply_by $mult
            dict set clock_data_dict $clock_key divide_by $div
            dict set clock_data_dict $clock_key duty_cycle $ccnt_dc
        }
        unset -nocomplain counter_index
    }
    return $clock_data_dict
}
# ----------------------------------------------------------------
#
proc ai_set_genclk_pin_info {clock_data_dict} {
#
# Description: Updates the dict with pin info collected from making
# STA API calls.
#
# ----------------------------------------------------------------
    dict for {clock_key info} $clock_data_dict {
        dict with info {
            ai_post_message debug "Setting pin info for clock $clock_key"
            if {$node_type == "register"} {
                set pin_collection [ai_get_registers $pattern]
            } elseif {$node_type == "pin"} {
                set pin_collection [ai_get_pins $pattern]
            } else {
                ai_post_message "debug" "Incorrect type of node."
            }
            set num_pins [get_collection_size $pin_collection]
            if {$num_pins == 1} {
                # Always set valid to true if we found the pin node
                ai_post_message debug "Setting clock as valid."
                dict set clock_data_dict $clock_key is_valid true
                
                # This for loop should only loop once.
                foreach_in_collection id $pin_collection {
                    set node_name [get_node_info -name $id]         
                    dict set clock_data_dict $clock_key pin_id $id
                    dict set clock_data_dict $clock_key pin_node_name $node_name
                }
                # Check if clock_exists, if it does, then
                # set key "exists" on the clock info dict.
                dict set clock_data_dict $clock_key exists [ai_clock_exists $node_name]

            
            } else {
                dict set clock_data_dict $clock_key is_valid false
            }

        }
    }
    return $clock_data_dict
    
    
} 
# ----------------------------------------------------------------
#
proc ai_set_baseclk_pin_info {clock_data_dict refclk_data_dict} {
#
    # Description: Updates the dict with pin info collected from refclk data
    # dict, which was obtained by traversing netlist.
#
# ----------------------------------------------------------------
    ai_post_message debug "In ai_set_baseclk_pin_info"

    dict for {clock_key info} $clock_data_dict {
        dict with info {
            ai_post_message debug "Setting pin info for clock $clock_key"
            
            # For each clock in refclk dict, find the one whose pin name
            # matches the pattern in baseclk dict. WE need to do this since
            # we dont find refclk nodes with patterns, but rather by traversal
            # of netlist from outclk backwards.
            
            set node_name ""
            dict for {clock_id info} $refclk_data_dict {
                dict with info {
                    ai_post_message debug "Comparing pattern $pattern with refclock: $ref_pin_node_name"
                    if {[string equal -nocase $pattern $ref_pin_node_name]} {
                        dict set clock_data_dict $clock_key pin_id $ref_pin_id
                        dict set clock_data_dict $clock_key pin_node_name $ref_pin_node_name
                        dict set clock_data_dict $clock_key port_id $ref_port_id
                        dict set clock_data_dict $clock_key port_node_name $ref_port_node_name
                        dict set clock_data_dict $clock_key is_fpga_pin $ref_is_fpga_pin
                        set node_name $ref_port_node_name
                        break
                    }
                }
            }
            # Check if clock_exists, if it does, then
            # set key "exists" on the clock info dict.
            dict set clock_data_dict $clock_key exists [ai_clock_exists $node_name]

        }
    }
    return $clock_data_dict   
}

proc ai_get_n_cnt_clock_node_name {gen_clock_data_dict} {
    dict for {clock_key info} $gen_clock_data_dict {
        dict with info {
            ai_post_message debug "Clock:  $clock_key, pin_node_name: $pin_node_name"

            if {$clock_key == "n_cnt_clock"} {
                return $pin_node_name
            }
        }
    }
    return ""
}

proc ai_get_m_cnt_clock_node_name {gen_clock_data_dict} {
    dict for {clock_key info} $gen_clock_data_dict {
        dict with info {
            ai_post_message debug "Clock:  $clock_key, pin_node_name: $pin_node_name"
            if {$clock_key == "m_cnt_clock"} {
                return $pin_node_name
            }
        }
    }
    return ""
}

proc ai_get_compensated_clock_node_name {gen_clock_data_dict clock_to_compensate} {
    dict for {clock_key info} $gen_clock_data_dict {
        dict with info {
            if {[info exists counter_index]} { 
                set clk_string_length [string length $clock_to_compensate]
                set clock_to_compensate_index [string index $clock_to_compensate [expr {$clk_string_length - 1}] ]
                if {$counter_index == $clock_to_compensate_index} {
                    return $pin_node_name
                }
            }
        }
    }
    return ""
}
# ----------------------------------------------------------------
#
proc ai_update_baseclk_data {base_clock_data_dict pll_parameters_dict} {
#
    # Description: Updates the refclk information based on atom settings
#
# ----------------------------------------------------------------
    ai_post_message debug "In ai_update_baseclk_data_dict"
    set mode [dict get $pll_parameters_dict prot_mode]

    dict for {base_clock_key info} $base_clock_data_dict {
        dict with info {
            if {$is_main_refclk} {
                set ref_period [dict get $pll_parameters_dict refclk_period]
                if {[string match "*UIB" $mode]} {
                    set ref_period [expr ceil($ref_period * 1000.0)/1000.0]
                } else {
                    set ref_period [expr round($ref_period * 1000.0)/1000.0] 
                }
                set ref_period [format %.3f $ref_period]
                dict set base_clock_data_dict $base_clock_key period $ref_period

                set half_period [expr $ref_period /2]
                if {[string match "*UIB" $mode]} {
                    set half_period [expr ceil($half_period * 1000.0)/1000.0] 
                } else {
                    set half_period [expr round($half_period * 1000.0)/1000.0] 
                }
                set half_period [format %.3f $half_period]
                dict set base_clock_data_dict $base_clock_key half_period $half_period

            }
        }
    }

    return $base_clock_data_dict
}

# ----------------------------------------------------------------
#
proc ai_update_genclk_sources {base_clock_data_dict gen_clock_data_dict pll_parameters_dict} {
#
# Description: Updates the genclk data dict with src nodes from the appropriate
#              refclks
#
# ----------------------------------------------------------------
    ai_post_message debug "In ai_update_genclk_sources"

    # Set it to either refclk or n_cnt_clock
    # Don't use vcoph anymore (HSD 14017082319)
    set compensation_mode [dict get $pll_parameters_dict compensation_mode]
    dict for {clock_key info} $gen_clock_data_dict {
        dict with info {
            ai_post_message debug "Setting src pin info for clock $clock_key"

            set node_name ""
            set main_refclk_key ""
            dict for {base_clock_key base_clock_data_dict_info} $base_clock_data_dict {
                dict with base_clock_data_dict_info {
                    if {$is_main_refclk} {
                        set main_refclk_key $base_clock_key
                        if {$is_fpga_pin} {
                            set node_name $port_node_name
                        } else {
                            set node_name $pin_node_name
                        }
                        break
                    }
                }
            }
            if {$clock_key == "extclk0" && $fbclk} {
                set src "m_cnt_clock"
            } elseif {$clock_key == "m_cnt_clock" && ($compensation_mode == "COMPENSATION_MODE_NON_DEDICATED_SOURCE_SYNC" || $compensation_mode == "COMPENSATION_MODE_NON_DEDICATED_NORMAL")} {
                # in non-dedicated feedback mode, set the m-counter's source to the compensated(last) c counter
                set src "compensated_c_cnt_clock"
            } elseif {$clock_key != "n_cnt_clock" && ![dict get $pll_parameters_dict n_bypass]} {
                set src "n_cnt_clock"
            }

            if {$src == "refclk" || $src == "cascade_in"} {
                set src_ $node_name
            } elseif {$src == "n_cnt_clock"} {
                if {[is_post_syn_sta]} {
                    set gen_clock_data_dict_for_post_syn $gen_clock_data_dict
                    dict for {clk_key gen_clock_data_dict_for_post_syn_info} $gen_clock_data_dict_for_post_syn {
                        if {$clk_key == "n_cnt_clock"} {
                            dict set gen_clock_data_dict $clock_key master [dict get $gen_clock_data_dict_for_post_syn_info name]
                        }
                    }
                } else {
                    set src_ [ai_get_n_cnt_clock_node_name $gen_clock_data_dict]
                }
            } elseif {$src == "m_cnt_clock"} {
                    set src_ [ai_get_m_cnt_clock_node_name $gen_clock_data_dict]
            } elseif {$src == "compensated_c_cnt_clock"} {
                set clock_to_compensate [dict get $pll_parameters_dict clock_to_compensate]
                set src_ [ai_get_compensated_clock_node_name $gen_clock_data_dict $clock_to_compensate]
            } else {
                set src_ ""
                ai_post_message "warning" "Undefined clock source: $src"
                dict set gen_clock_data_dict $clock_key is_valid false
            }

            dict set gen_clock_data_dict $clock_key src $src_
        }
    }
    return $gen_clock_data_dict
}
proc ai_invalidate_clocks {clock_data_dict} {
    # Set the is_valid flag on each clock to false
    dict for {clock_key info} $clock_data_dict {
        dict with info {
            dict set clock_data_dict $clock_key is_valid false
        }
    }
    return $clock_data_dict
}
proc ai_get_first_outclk_node {clock_data_dict} {
    set outclk_pin_id "None"
    dict for {clock_key info} $clock_data_dict {
        dict with info {
            if {$node_type == "pin" && $is_valid} {
                set outclk_pin_id $pin_id
                break
            }
        }
    }
    if {$outclk_pin_id == "None"} {
        ai_post_message "warning" "Could not find any valid outclks"
    }
    return $outclk_pin_id 
}
# ----------------------------------------------------------------
#
proc ai_get_pll_pins { instname } {
#
# Description: Stores the pins of interest for the instance of the IP
#
# ----------------------------------------------------------------

    set base_clock_data_dict $::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_base_clock_data
    set gen_clock_data_dict $::GLOBAL_top_iopll_altera_iopll_2000_n6jjr3a_gen_clock_data
    # First regsub the instance name for the pin names and patterns.
    set base_clock_data_dict [ai_subst_instname $base_clock_data_dict $instname]
    set gen_clock_data_dict [ai_subst_instname $gen_clock_data_dict $instname]


    set pll_parameters_dict [ai_get_pll_atom_parameters $instname] 
    set gen_clock_data_dict [ai_set_genclk_pin_info $gen_clock_data_dict]

    ai_post_message debug "gen_clock_data_dict initial: "
    print_clock_data $gen_clock_data_dict 
    
    # Traverse the first generated clock back to find FPGA pins for refclks.
    set outclk_node_id [ai_get_first_outclk_node $gen_clock_data_dict]
    if {$outclk_node_id != "None"} {
        set refclk_data_dict [ai_get_input_clk_info $outclk_node_id]
        ai_post_message debug "refclk_data_dict: "
        print_clock_data $refclk_data_dict

        set base_clock_data_dict [ai_set_baseclk_pin_info $base_clock_data_dict $refclk_data_dict]
        set gen_clock_data_dict [ai_update_genclk_sources $base_clock_data_dict $gen_clock_data_dict $pll_parameters_dict]
        set gen_clock_data_dict [ai_update_genclk_div_mult $gen_clock_data_dict $pll_parameters_dict] 
        set base_clock_data_dict [ai_update_baseclk_data $base_clock_data_dict $pll_parameters_dict] 
        ai_post_message debug "base_clock_data_dict: "
        print_clock_data $base_clock_data_dict 
        ai_post_message debug "gen_clock_data_dict final: "
        print_clock_data $gen_clock_data_dict
    } else {
        # Make sure that we don't create any clock constraints
        # if no output clock was found
        set gen_clock_data_dict [ai_invalidate_clocks $gen_clock_data_dict]
    }
    
    return [list $base_clock_data_dict $gen_clock_data_dict]
    
}

# ----------------------------------------------------------------
#
proc ai_get_input_clk_info { outclk_pin_id } {
#
# Description: Searches back from the output of the PLL to find the reference clock pin.
#              If the reference clock is fed by an input buffer, it finds that pin, otherwise
#              in cascading modes it will return the immediate reference clock input of the PLL.
#
# ----------------------------------------------------------------
    if {[ai_is_node_type_pll_clk $outclk_pin_id]} {
        #stores the refclk pin ids that were found by tracing the 
        #output clocks back up
        array set refclk_array [list]
        ai_traverse_fanin_up_to_depth $outclk_pin_id ai_is_node_type_pll_inclk clock refclk_array 20
        array set refclk_info_array [list]
        foreach {net_id id} [array get refclk_array] {
            set net_name [get_node_info -name $net_id]
            set refclk_info_array($net_id) $net_name

        }
        # Dict to hold the refclk info found by traversing the netlist back.
        # refclk_data = {
        #   clock_id = {
        #       ref_pin_id: str,
        #       ref_pin_node_name: str,
        #       ref_port_id: str,
        #       ref_port_node_name: str,
        #       ref_is_fpga_pin: true/false,
        #   }
        # }
        set refclk_data [dict create]
        
        set clock_id 0

        #only works if there is either 1 or 2 refclks
        if {[array size refclk_array] == 1 || [array size refclk_array] == 2} {
            #iterate over each refclk pin and trace back to find its input port
            foreach refclk_pin_id [array names refclk_info_array] {
                array set user_refclk_array [list]
                array unset refclk_array
                array unset user_refclk_array [list]
                     
                ai_traverse_fanin_up_to_depth $refclk_pin_id ai_is_node_type_user_clock clock user_refclk_array 10
                ai_traverse_fanin_up_to_depth $refclk_pin_id ai_is_node_type_pin clock refclk_array 10
                     
                # If fed by any user specified clock (which could be specified at the pin level or at the
                # buffer level), then use that pin as the source.
                # Otherwise, trace back to the dedicated input pin (depth 10 so that we don't include global clocks)
                if {[array size user_refclk_array] == 1 || [array size refclk_array] < 1} {
                    # Fed by a user specified clock, a global clock etc. 
                    dict set refclk_data $clock_id ref_pin_id $refclk_pin_id 
                    dict set refclk_data $clock_id ref_pin_node_name $refclk_info_array($refclk_pin_id)
                    dict set refclk_data $clock_id ref_port_id ""
                    dict set refclk_data $clock_id ref_port_node_name ""
                    dict set refclk_data $clock_id ref_is_fpga_pin false
                } else {
                    # Fed by a dedicated input pin
                    set port_id_ [lindex [array names refclk_array] 0]

                    dict set refclk_data $clock_id ref_pin_id $refclk_pin_id 
                    dict set refclk_data $clock_id ref_pin_node_name $refclk_info_array($refclk_pin_id)
                    dict set refclk_data $clock_id ref_port_id $port_id_
                    dict set refclk_data $clock_id ref_port_node_name [get_node_info -name $port_id_]
                    dict set refclk_data $clock_id ref_is_fpga_pin true
                }

                incr clock_id
            }
        } else {
            ai_post_message critical_warning "Could not find PLL ref clock that feeds [get_node_info -name $outclk_pin_id]" all
        }
    } else {
        ai_post_message error "Internal error: ai_get_input_clk_info only works for PLL output clocks" all
    }
    return $refclk_data
}

# ----------------------------------------------------------------
#
proc ai_is_node_type_pin { node_id } {
#
# Description: Determines if a node is a top-level port of the FPGA
#
# ----------------------------------------------------------------

    set node_type [get_node_info -type $node_id]
    if {$node_type == "port"} {
        set result 1
    } else {
        set result 0
    }
    return $result
}

# ----------------------------------------------------------------
#
proc ai_is_node_type_user_clock { node_id } {
#
# Description: Determines if a node is a user-defined clock
#
# ----------------------------------------------------------------
    set node_name [get_node_info -name $node_id]     
   
    if {[ai_clock_exists $node_name] && ![ai_is_node_type_pin $node_id]} {
        return 1
    } else {
        return 0
    }
}

# ----------------------------------------------------------------
#
proc ai_is_node_type_pll_clk { node_id } {
#
# Description: Determines if a node is an output of a PLL
#
# ----------------------------------------------------------------

    set cell_id [get_node_info -cell $node_id]
    
    if {$cell_id == ""} {
        set result 0
    } else {
        set atom_type [get_cell_info -atom_type $cell_id]
        if {$atom_type == "IOPLL"} {
            set node_name [get_node_info -name $node_id]
            ai_post_message debug "Node_name: $node_name"
            if {[string match "*fourteennm_pll\|outclk\\\[*\\\]" $node_name] || [string match "*tennm_pll\|outclk\\\[*\\\]" $node_name] || [string match "*tennm_ph2_iopll\|out_clk\\\[*\\\]" $node_name]} {
                set result 1
            } elseif {[string match "*fourteennm_pll~ncntr_reg" $node_name] || [string match "*tennm_pll~ncntr_reg" $node_name] || [string match "*tennm_ph2_iopll~ncntr_reg" $node_name]} {
                set result 1                
            } elseif {[string match "*fourteennm_pll~c*cntr_reg" $node_name] || [string match "*tennm_pll~c*cntr_reg" $node_name] || [string match "*tennm_ph2_iopll~c*cntr_reg" $node_name]} {
                set result 1                
            } elseif {[string match "*fourteennm_pll~mcntr_reg" $node_name] || [string match "*tennm_pll~mcntr_reg" $node_name] || [string match "*tennm_ph2_iopll~mcntr_reg" $node_name]} {
                set result 1                
            } elseif {[string match "*fourteennm_pll\|lvds_clk\\\[*\\\]" $node_name] || [string match "*tennm_pll\|lvds_clk\\\[*\\\]" $node_name]} {
                set result 1                
            } elseif {[string match "*fourteennm_pll\|loaden\\\[*\\\]" $node_name] || [string match "*tennm_pll\|loaden\\\[*\\\]" $node_name]} {
                set result 1
            } elseif {[string match "*tennm_ph2_iopll\|out_clk_periph0" $node_name]} {
                set result 1
            } elseif {[string match "*tennm_ph2_iopll\|out_clk_periph1" $node_name]} {
                set result 1
            } elseif {[string match "*tennm_ph2_iopll\|vco_clk_periph" $node_name]} {
                set result 1
            } elseif {[string match "*fourteennm_pll\|vcoph\\\[*\\\]" $node_name] || [string match "*tennm_pll\|vcoph\\\[*\\\]" $node_name] || [string match "*tennm_ph2_iopll\|vco_clk\\\[*\\\]" $node_name]} {
                set result 1
            } elseif {[string match "*fourteennm_pll\|pll_cascade_out" $node_name] || [string match "*tennm_pll\|pll_cascade_out" $node_name] || [string match "*tennm_ph2_iopll\|out_clk_cascade" $node_name]} {
                set result 1
            } elseif {[string match "*fourteennm_pll\|extclk_output\\\[*\\\]" $node_name] || [string match "*tennm_pll\|extclk_output\\\[*\\\]" $node_name] || [string match "*tennm_ph2_iopll\|out_clk_external*" $node_name]} {
                set result 1
            } else {
                set result 0
            }           
        } else {
            set result 0
        }
    }
    return $result
}

# ----------------------------------------------------------------
#
proc ai_is_node_type_pll_inclk { node_id } {
#
# Description: Determines if a node is an input of a PLL
#
# ----------------------------------------------------------------


    set cell_id [get_node_info -cell $node_id]
    
    if {$cell_id == ""} {
        set result 0
    } else {
        set atom_type [get_cell_info -atom_type $cell_id]
        if {$atom_type == "IOPLL"} {
            set node_name [get_node_info -name $node_id]
            set fanin_edges [get_node_info -clock_edges $node_id]
            if {([string match "*|refclk\\\[*\\\]" $node_name] || [string match "*|ref_clk0" $node_name] || [string match "*|ref_clk1" $node_name])  && [llength $fanin_edges] > 0} {
                set result 1
            } elseif {([string match "*|pll_cascade_in" $node_name]) && [llength $fanin_edges] > 0} {
                set result 1
            } else {
                set result 0
            }
        } else {
            set result 0
        }
    }
    return $result
}

# -----------------------------------------------------------------
#
proc ai_find_pll_inclk { match_command edge_type } {
#
# Desciption: Finds the pll inclk pin whose name matches the
#             match_command. Returns the inclk pin name if such
#             a pin is found, and returns "" if it is not found
#
# -----------------------------------------------------------------

    set fanin_id ""
    foreach_in_collection pin [get_pins $match_command] {
        if {[llength [get_node_info -${edge_type}_edges $pin]] > 0} {
            set fanin_id $pin
            break
        }
    }
    return $fanin_id
}

# ----------------------------------------------------------------
#
proc ai_traverse_fanin_up_to_depth { node_id match_command edge_type results_array_name depth} {
#
# Description: General traversal function up until a depth.  Use a function pointer to decide
#              ending conditions.
#
# ----------------------------------------------------------------

    upvar 1 $results_array_name results

    if {$depth < 0} {
        error "Internal error: Bad timing netlist search depth"
    }

    ai_post_message debug "\[ai_traverse_fanin_up_to_depth\] called with node_id: $node_id cmd: \"$match_command\" type: $edge_type node: [get_node_info -name $node_id]"
    if {[is_post_syn_sta] && $match_command == "ai_is_node_type_pll_inclk"} {
        set atom_name [get_cell_info -name [get_node_info -cell $node_id]]
        set fanin_id [ai_find_pll_inclk $atom_name|core*refclk* $edge_type]
        if {$fanin_id == ""} {
            set fanin_id [ai_find_pll_inclk $atom_name|pll*cascade*in* $edge_type]
        }
        if {$fanin_id == ""} {
            set fanin_id [ai_find_pll_inclk $atom_name|ref*clk* $edge_type]
        }
        set results($fanin_id) 1
        ai_post_message debug "\[ai_traverse_fanin_up_to_depth\] post syn model returning fanin id: [get_node_info -name $fanin_id]"
        return
    }

    set fanin_edges [get_node_info -${edge_type}_edges $node_id]
    set number_of_fanin_edges [llength $fanin_edges]
    for {set i 0} {$i != $number_of_fanin_edges} {incr i} {
        set fanin_edge [lindex $fanin_edges $i]
        set fanin_id [get_edge_info -src $fanin_edge]
        if {$match_command == "" || [eval $match_command $fanin_id] != 0} {
            set results($fanin_id) 1
        } elseif {$depth == 0} {
        } else {
            ai_traverse_fanin_up_to_depth $fanin_id $match_command $edge_type results [expr {$depth - 1}]
        }
    }
}

# ----------------------------------------------------------------
#
proc ai_index_in_collection { col j } {
#
# Description: Returns a particular index in a collection.
#              Analagous to lindex for lists.
#
# ----------------------------------------------------------------

    set i 0
    foreach_in_collection path $col {
        if {$i == $j} {
            return $path
        }
        set i [expr $i + 1]
    }
    return ""
}

#
# Description: Rounds a given floating point number
#              to 3 decimal places
#
# ----------------------------------------------------------------
proc ai_round_3dp { x } {
    return [expr { round($x * 1000) / 1000.0  } ]
}

# ----------------------------------------------------------------
# Description: Checks whether a given clock already exists 
# ----------------------------------------------------------------
proc ai_clock_exists { clock_name } {
    set clock_found false
    set input_clocks_col [get_clocks -nowarn]
    set num_input_clocks [get_collection_size $input_clocks_col]
    
    if {$num_input_clocks > 0} {
        foreach_in_collection iclk $input_clocks_col {
            if {![is_clock_defined $iclk]} {
                continue
            }

            set clk_targets_col [get_clock_info -target $iclk]
            set num_clk_targets [get_collection_size $clk_targets_col]
            if {$num_clk_targets > 0} {
                foreach_in_collection itgt $clk_targets_col {
                    set node_name [get_node_info -name $itgt]
                    if {[string compare $node_name $clock_name] == 0} {
                        set clock_found true
                        break
                    }
                }
            }
            if {$clock_found == true} {
                break;
            }
        }
    }

   return $clock_found 
}

proc ai_get_pll_atom {instname} {
    foreach_in_collection node [get_atom_nodes -type IOPLL] {
        set name [ai_get_timequest_name [get_atom_node_info -key NAME -node $node]]
        set node_list($name) $node

        if {[string first $instname $name] == 0} {
            return $node
        }
    }
    set sdc_file_name [info script]
    ai_post_message warning "Could not find IOPLL atom with the name <$instname> while processing <$sdc_file_name>. Please check the synthesis report to ensure that the IOPLL was not synthesized away." all
}
proc ai_get_mult_div_factors {clock_key src ncnt mcnt ccnt counter_index \
                              compensated_counter_div compensation_mode \
                              clock_to_compensate} {
    if {$clock_key == "vcoph" || $clock_key == "vcoph_periph"} {
        set clock_mult $mcnt
        set clock_div 1
    } elseif {$clock_key == "n_cnt_clock"} {
        set clock_mult 1
        set clock_div $ncnt
    } elseif {$clock_key == "m_cnt_clock"} {
        set clock_mult 1
        set clock_div 1
    } else {

        if {[string first "vcoph" $src] > -1} {
            set clock_mult 1
            set clock_div $ccnt
        } else {
            # Handle NDFB mode. 
            # The equation for counter which is to be compensated: C_k = M / N
            # The equation for all other counters:                 C_!k = (M * C_k) / (N * C_!k)
            if {$compensation_mode == "COMPENSATION_MODE_NON_DEDICATED_SOURCE_SYNC" || $compensation_mode == "COMPENSATION_MODE_NON_DEDICATED_NORMAL"} {
                set clk_string_length [string length $clock_to_compensate]
                set clock_to_compensate_index [string index $clock_to_compensate [expr {$clk_string_length - 1}] ]
                if {$counter_index == $clock_to_compensate_index} {
                    set clock_mult $mcnt
                    # Instead of dividing by N, we just divide by 1
                    # since a clock based on the N counter would be created
                    # if N > 1 and this clock would be derived based on that,
                    # so we already have a division happening.
                    set clock_div 1
                } else {
                    set clock_mult [expr $mcnt * $compensated_counter_div]
                    set clock_div $ccnt
                }
            } else {
                ai_post_message debug "Normal C counter"
                set clock_mult $mcnt
                set clock_div $ccnt
            }
        }
    }
    return [list $clock_mult $clock_div]

}
# ----------------------------------------------------------------
#
proc ai_get_pll_atom_parameters {instname} {
#
# Description: Gets the PLL paramaters from the Quartus atom and not 
#              from the IP generated parameters.
#
# ----------------------------------------------------------------

    set pll_atom [ai_get_pll_atom $instname]
    
    set atom_type [get_atom_node_info -key ENUM_ATOM_TYPE -node $pll_atom]
    
    if {($atom_type == "TENNM_PH2_IOPLL")} {
                                                                             
        dict set pll_params compensation_mode [get_atom_node_info -key COMPENSATION_MODE -node $pll_atom]
        dict set pll_params clock_to_compensate [get_atom_node_info -key COMPENSATION_CLK_SOURCE -node $pll_atom]
        dict set pll_params prot_mode [get_atom_node_info -key PROTOCOL_MODE -node $pll_atom]

        # Get refclk frequency (might have changed since IP generation)
        set refclk_freq_bin [get_atom_node_info -key REF_CLK_0_FREQ -node $pll_atom]
        set refclk_freq_hz [expr "0b$refclk_freq_bin"]
    
        set refclk_period [expr 1000000000.0 / $refclk_freq_hz]
        dict set pll_params refclk_period $refclk_period

        dict set pll_params m_total [get_atom_node_info -key FB_CLK_M_DIV -node $pll_atom]
        if {[dict get $pll_params m_total] == 1} {
            dict set pll_params m_bypass 1
        } else {
            dict set pll_params m_bypass 0    
        }
        dict set pll_params n_total [get_atom_node_info -key REF_CLK_N_DIV -node $pll_atom]
        if {[dict get $pll_params n_total] == 1} {
            dict set pll_params n_bypass 1
        } else {
            dict set pll_params n_bypass 0    
        }


        for { set i 0 } { $i < 7} { incr i } {
            # Get the C counter parameter settings from the atom netlist
            dict set pll_params c${i}_total [get_atom_node_info -key OUT_CLK_${i}_C_DIV -node $pll_atom]
            dict set pll_params duty_cycle${i} [get_atom_node_info -key OUT_CLK_${i}_DUTYCYCLE_PERCENT -node $pll_atom]
        }
    } else {
        dict set pll_params compensation_mode [get_atom_node_info -key ENUM_IOPLL_FEEDBACK -node $pll_atom]
        dict set pll_params clock_to_compensate [get_atom_node_info -key INT_IOPLL_CLOCK_TO_COMPENSATE -node $pll_atom]
    
        # Get refclk frequency (might have changed since IP generation)
        set refclk_freq [get_atom_node_info -key TIME_REFERENCE_CLOCK_FREQUENCY -node $pll_atom]
        set refclk_int [string trim $refclk_freq "*MHZmhz"]
        set refclk_period [expr 1000.0 / $refclk_int]
        dict set pll_params refclk_period $refclk_period
    
        dict set pll_params m_hi_div [get_atom_node_info -key INT_IOPLL_M_CNT_HI_DIV -node $pll_atom]
        dict set pll_params m_lo_div [get_atom_node_info -key INT_IOPLL_M_CNT_LO_DIV -node $pll_atom]
        dict set pll_params m_bypass [get_atom_node_info -key BOOL_IOPLL_M_CNT_BYPASS_EN -node $pll_atom]
        if {[dict get $pll_params m_bypass]} {
            set total 1
        } else {
            set total  [expr [dict get $pll_params m_hi_div] + [dict get $pll_params m_lo_div]]
        }
        dict set pll_params m_total $total
    
        dict set pll_params n_hi_div [get_atom_node_info -key INT_IOPLL_N_CNT_HI_DIV -node $pll_atom]
        dict set pll_params n_lo_div [get_atom_node_info -key INT_IOPLL_N_CNT_LO_DIV -node $pll_atom]
        dict set pll_params n_bypass [get_atom_node_info -key BOOL_IOPLL_N_CNT_BYPASS_EN -node $pll_atom]
        if {[dict get $pll_params n_bypass]} {
            set total 1
        } else {
            set total  [expr [dict get $pll_params n_hi_div] + [dict get $pll_params n_lo_div]]
        }
        dict set pll_params n_total $total
    
        for { set i 0 } { $i < 9} { incr i } {
            # Get the C counter parameter settings from the atom netlist
            dict set pll_params c${i}_hi_div [get_atom_node_info -key INT_IOPLL_C_CNT_${i}_HI_DIV -node $pll_atom]
            dict set pll_params c${i}_lo_div [get_atom_node_info -key INT_IOPLL_C_CNT_${i}_LO_DIV -node $pll_atom]
            dict set pll_params c${i}_bypass [get_atom_node_info -key BOOL_IOPLL_C_CNT_${i}_BYPASS_EN -node $pll_atom]
            dict set pll_params c${i}_odd_div_duty_en [get_atom_node_info -key BOOL_IOPLL_C_CNT_${i}_EVEN_DUTY_EN -node $pll_atom]
    
            # Calculate the total counter value
            if {[dict get $pll_params c${i}_bypass]} {
                set total 1
            } else {
                set total [expr [dict get $pll_params c${i}_hi_div] + [dict get $pll_params c${i}_lo_div]]
            }
            dict set pll_params c${i}_total $total
    
            # Calculate the duty cycle
            if {[dict get $pll_params c${i}_bypass]} {
                set total_duty 50
            } else {
                if {[dict get $pll_params c${i}_odd_div_duty_en]} {
                    set duty_tweak 1
                } else {
                    set duty_tweak 0
                }
                set total_duty [expr (([dict get $pll_params c${i}_hi_div] - (0.5*$duty_tweak))*100)/$total]
                set total_duty [format %.3f $total_duty]
            }
            dict set pll_params duty_cycle${i} $total_duty
        }    
    }

    return $pll_params
}

#__ACDS_USER_COMMENT__Set max delay if in fit flow, otherwise set false path through "through_pin"
# originally in the LVDS SDC. This is called if we are exporting loaden to LVDS
proc set_max_delay_in_fit_or_false_path_in_sta_through_no_warn {through_pin delay} {

    set through_pin_collection [get_pins -compatibility_mode -nowarn $through_pin]
    if {[get_collection_size $through_pin_collection] <= 0} { return }
    
    # if fit_flow == 1
    if {$::TimeQuestInfo(nameofexecutable) == "quartus_fit" } { 
        set_max_delay -through $through_pin_collection $delay
    } else { 
        set_false_path -through $through_pin_collection
    } 
}

# ----------------------------------------------------------------
#
proc is_m_n_cntr {pattern} {
#
# Description: Determines if a pattern matches m/n_cntr
#
# ----------------------------------------------------------------

    if {[string match "*fourteennm_pll~ncntr_reg" $pattern]||[string match "*tennm_pll~ncntr_reg" $pattern]||
        [string match "*fourteennm_pll~mcntr_reg" $pattern]||[string match "*tennm_pll~mcntr_reg" $pattern]||
        [string match "*tennm_ph2_iopll~ncntr_reg" $pattern]||[string match "*tennm_ph2_iopll~mcntr_reg" $pattern]} {
            return 1
    } else {
        return 0
    }
}

# ----------------------------------------------------------------
#
proc create_non_virtual_generated_clock_with_master_or_source \
{master source name multiply_by divide_by phase duty_cycle pin_node_name} {
#
# Description: Creates a non-virtual generated clock using
#              the -source or the -master argument
#
# ----------------------------------------------------------------
    if {$master != ""} {
        create_generated_clock -add \
            -master $master \
            -name $name \
            -multiply_by $multiply_by \
            -divide_by $divide_by \
            -phase $phase \
            -duty_cycle $duty_cycle \
            $pin_node_name
    } else {
        create_generated_clock -add \
            -source $source \
            -name $name \
            -multiply_by $multiply_by \
            -divide_by $divide_by \
            -phase $phase \
            -duty_cycle $duty_cycle \
            $pin_node_name
    }
}

# ----------------------------------------------------------------
#
proc create_virtual_generated_clock_with_master_or_source \
{master source name multiply_by divide_by phase duty_cycle} {
#
# Description: Creates a virtual generated clock using
#              the -source or the -master argument
#
# ----------------------------------------------------------------
    if {$master != ""} {
        create_generated_clock -add \
            -master $master \
            -name $name \
            -multiply_by $multiply_by \
            -divide_by $divide_by \
            -phase $phase \
            -duty_cycle $duty_cycle
    } else {
        create_generated_clock -add \
            -source $source \
            -name $name \
            -multiply_by $multiply_by \
            -divide_by $divide_by \
            -phase $phase \
            -duty_cycle $duty_cycle
    }
}

# ----------------------------------------------------------------
#
proc get_master_clock_given_refclk_src \
{refclk_src} {
#
# Description: Performs string comparisons to determine the master
#              clock that feeds a particular PLL refclk iterm
#              No comparison needed if there's only one master clock.
# ----------------------------------------------------------------
    set clocks [get_clocks -nowarn -of_objects $refclk_src]
    if {[get_collection_size $clocks] == 1} {
        foreach_in_collection clk $clocks {
            return $clk
        }
    } else {
        foreach_in_collection clk $clocks {
            set clk_name [get_clock_info -name $clk]
            set pll_path [regsub {[^|]+$} $clk_name ""]
            if {[string first $pll_path $refclk_src] == 0} {
                return $clk
            }
        }
    }
}
 1
